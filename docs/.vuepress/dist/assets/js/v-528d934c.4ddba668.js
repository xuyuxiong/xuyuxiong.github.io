"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[9253],{1312:(n,l,i)=>{i.r(l),i.d(l,{data:()=>a});const a={key:"v-528d934c",path:"/frontend/CSS.html",title:"CSS",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"知识点",slug:"知识点",children:[]},{level:2,title:"常用样式",slug:"常用样式",children:[]},{level:2,title:"常用标签和选择器",slug:"常用标签和选择器",children:[]}],filePathRelative:"frontend/CSS.md",git:{updatedTime:1635519893e3,contributors:[{name:"徐誉雄",email:"xuyuxiong@shinemo.com",commits:1}]}}},6676:(n,l,i)=>{i.r(l),i.d(l,{default:()=>e});const a=(0,i(6252).uE)('<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h1><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><ul><li><p>绝对路径与相对路径 绝对路径：无论从哪里出发，通过这个地址都能找到目标(就是完整的文件地址) 相对路径：你往前走一百米，然后左转再走两百米就到了（相对于当前位置）</p></li><li><p>普通选择器优先级 当优先级高的选择器 和 优先级低的选择器 给同一个元素，添加同一个样式 会以优先级高的样式为准，最终显示在元素上 优先级规则（普通的选择器） id &gt; class &gt; 标签选择器 &gt; *通配符 行间样式 &gt; 内部样式和外部样式</p></li><li><p>垂直居中大法</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// 把父级转为单元格 display:table-cell再给父级加上vertical-align:middle\n.one</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>\n  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.two</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> #008c8c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">// 使用line-height居中，有时不是绝对的居中\n.one</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n  <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.two</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> #008c8c<span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></li><li><p>横向布局 (1)转化为inline-block</p><ul><li>注：元素换行会产生空格，给父级加font-size:0;进行处理</li><li>注：转化为inline-block之后记得给元素加上vertical-align:top;（默认基线对齐 方式改为顶部对齐，处理底部出现空隙的问题）</li></ul><p>(2)浮动</p><ul><li>注：记得清除浮动</li></ul></li><li><p>文档流（normal flow） 文档流，也叫正常流、普通流。 指页面中的默认布局：元素从左至右、从上到下显示。</p></li><li><p>伪元素（before和after） 伪元素：利用css给一个标签创建出来的子级元素，该元素在页面中真实存在，但是在html中并不存在。</p></li><li><p>清浮动</p><ol><li>如果可以使用固定高度，可以直接给父级添加固定高度</li><li>利用&lt;br/&gt;达到清除浮动的效果</li><li>使用clear属性清除浮动</li><li>利用伪元素清除浮动</li></ol></li><li><p>CSS3 transition 过渡 transition-duration 过渡持续时间 transition-property 想要执行的过渡样式 transition-delay 过渡延迟时间 transition-timing-function 过渡执行动画</p><ul><li>linear 整个过程保持相同的速度</li><li>ease 慢速开始，然后加速，在慢下来，结束时特别慢（默认值）</li><li>ease-in 慢速开始，然后加速</li><li>ease-out 快速开始，然后减速</li><li>ease-in-out 与ease类似，中间较快，两端很慢但不同速</li><li>cubic-bezier 三次方贝塞尔曲线cubic-bezier(x1,y1,x2,y2)</li></ul></li><li><p>CSS3 transform 变换 特性：</p><ol><li>不脱离文档流</li><li>不改变文档大小</li><li>具有四种变换类别，并且允许多值书写</li><li>多值的时候，从后到前执行动画</li></ol><ul><li>translate（x，y） 位移 <ul><li>translateX（）、translateY（）、translateZ（）</li><li>如果只有一个值的情况下，设置的是x</li><li>x、y同时移动</li><li>百分比数值，基于自己本身计算</li></ul></li><li>rotate（180deg）旋转 <ul><li>rotateX（）、rotateY（）、rotateZ（）</li><li>角度（单位：deg）</li><li>圈数（单位：turn）</li></ul></li><li>scale（x，y）缩放 <ul><li>scaleX（）、scaleY（）、scaleZ（）</li><li>单位：倍数</li><li>如果只有一个值的情况下，同时设置x和y</li><li>x和y同时缩放</li></ul></li><li>skew（x，y）斜切 <ul><li>skew（）、skewY（）</li><li>单位（deg）</li><li>如果只有一个值的情况下，设置的是x</li></ul></li><li>transform-origin 变化原点 <ul><li>关键词left、right、top、bottom</li><li>数值（px）</li><li>默认 center center</li></ul></li><li>transform 3D <ul><li>transform-style(preserve-3d) 建立3D空间</li><li>perspective 景深</li><li>perspective-origin 景深基点</li></ul></li></ul></li><li><p>CSS3 animation 动画</p><ul><li>animation-name 绑定到选择器的 keyframe 名称</li><li>keyframes 规定动画 @keyframes name {selector {//css样式;}} <ul><li>name 必须，定义动画名称</li><li>selector 必须，动画时长百分比</li><li>0-100%</li><li>from（与 0% 相同） to（与 100% 相同） @keyframes mymove{ 0% {top:0px; background:red;} 100% {top:200px; background:yellow;} }</li></ul></li><li>animation-duration 完成动画所花费的时间，以秒或毫秒计 <ul><li>默认值是0</li></ul></li><li>animation-timing-function 规定动画的速度曲线 <ul><li>linear 动画从头到尾的速度是相同的。</li><li>ease 默认。动画以低速开始，然后加快，在结束前变慢。</li><li>ease-in 动画以低速开始。</li><li>ease-out 动画以低速结束。</li><li>ease-in-out 动画以低速开始和结束。</li><li>cubic-bezier(n,n,n,n) 在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</li></ul></li><li>animation-delay 动画开始之前的延迟时间，默认值是0</li><li>animation-iteration-count 动画播放的次数 <ul><li>n 定义动画播放次数的数值。</li><li>infinite 规定动画应该无限次播放。</li></ul></li><li>animation-direction 是否应该轮流反向播放动画 <ul><li>normal 默认值。动画应该正常播放。</li><li>alternate 动画应该轮流反向播放。</li></ul></li><li>animation-play-state: 属性规定动画正在运行还是暂停 <ul><li>paused|running;</li></ul></li><li>animation-fill-mode 属性规定动画在播放之前或之后，其动画效果是否可见 <ul><li>none</li><li>forwards 规定动画运动完成之后，停留在最后一帧的状态</li><li>backwards 在动画播放之前，动画延时的这段时间里直接使用关键帧里面的第一帧样式</li><li>both</li></ul></li></ul></li><li><p>flex 弹性布局 http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</p></li><li><p>网格布局 http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</p></li></ul><h2 id="常用样式" tabindex="-1"><a class="header-anchor" href="#常用样式" aria-hidden="true">#</a> 常用样式</h2><ul><li>background - 元素背景 background: 背景颜色 背景图 背景重复 背景定位 背景跟随滚动。对应如下： background: background-color background-image background-repeat background-position background-attachment</li><li>font字体 <img src="https://img.imgdb.cn/item/60728a0d8322e6675c6b30d8.png" alt=""> 在font复合写法里：font-size和font-family是必写的</li><li>文本设置 文本对齐方式text-align：left \\ right \\ center 强制换行 word-break：break-all 强制不换行 white-space:nowrap overflow：visible（默认值）\\ hidden \\ scroll</li></ul><h2 id="常用标签和选择器" tabindex="-1"><a class="header-anchor" href="#常用标签和选择器" aria-hidden="true">#</a> 常用标签和选择器</h2><ul><li><p>img标签 特性：</p><ol><li>一行显示多个，父级宽度不够，元素换行</li><li>支持宽高</li><li>宽高等比缩放（宽高同时设定，不会等比缩放）</li><li>img标签底部存在间隙（vertical-align:top;解决这个问题）</li><li>换行会被解析出一个空格</li></ol><p>换行产生间隙的解决方案：</p><ol><li>不换行</li><li>父级font-size设置为0（常用）</li><li>利用margin-left:负值</li></ol></li><li><p>a标签 a标签的用途：</p><ol><li>跳转页面</li><li>下载文件</li><li>瞄点跳转</li><li>打电话</li><li>发邮件</li></ol><p>特性：</p><ol><li>一行可以显示多个，父级宽度不够会换行显示</li><li>不支持宽高</li><li>换行会产生空格</li><li>父级字体颜色的设置对其无效</li><li>有下划线</li></ol><p>a标签的伪类：</p><ul><li>没有被访问过的（:link）</li><li>被访问过的（:visited）</li><li>鼠标经过这个链接（:hover）</li><li>在这个链接上按下去（:active） 书写顺序注意按lvha(后出现的伪类会覆盖先出现的伪类)</li></ul></li><li><p>input表单元素(<input type="">)</p><ul><li>用于收集用户信息，根据不同的type值，让input表单元素具备不一样的功能</li><li>type类型： A.text 单行文本输入框 B.submit 提交 C.password 密码框 D.reset 重置按钮 E.button按钮 F.file文件上传 G.hidden隐藏域 该表单元素的用途： 发送信息的时候，携带一些需要后端接收，但不需要用户看到的内容,而且该请求一定是需要通过表单的form进行提交的 H.radio 单选 I.checkbox复选</li></ul></li><li><p>label标签(帮助扩大点击区域，而不是只有点击表单元素有效)</p></li><li><p>select 下拉表单 &amp;&amp; option 选项</p></li><li><p>textarea 多行文本输入框</p></li><li><p>表单伪类 :checked :focus</p></li></ul>',7),s={},e=(0,i(3744).Z)(s,[["render",function(n,l){return a}]])},3744:(n,l)=>{l.Z=(n,l)=>{for(const[i,a]of l)n[i]=a;return n}}}]);