"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[6839],{1891:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-429ff5d2",path:"/Node.js/Node.js.html",title:"Node.js",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"Node.js介绍",slug:"node-js介绍",children:[]},{level:3,title:"安装Node.js",slug:"安装node-js",children:[]},{level:3,title:"使用Node.js实现第一个服务器",slug:"使用node-js实现第一个服务器",children:[]},{level:3,title:"模块化",slug:"模块化",children:[]},{level:3,title:"npm包管理器",slug:"npm包管理器",children:[]},{level:2,title:"fs模块",slug:"fs模块",children:[{level:3,title:"buffer缓冲区",slug:"buffer缓冲区",children:[]}]},{level:2,title:"模板引擎",slug:"模板引擎",children:[]},{level:2,title:"nunjucks模板引擎在koa中的应用",slug:"nunjucks模板引擎在koa中的应用",children:[]},{level:2,title:"koa介绍",slug:"koa介绍",children:[{level:3,title:"koa使用",slug:"koa使用",children:[]},{level:3,title:"Application对象",slug:"application对象",children:[]},{level:3,title:"上下文context对象常用属性及方法",slug:"上下文context对象常用属性及方法",children:[]},{level:3,title:"koa常用中间件介绍",slug:"koa常用中间件介绍",children:[]},{level:3,title:"一、koa-router",slug:"一、koa-router",children:[]},{level:3,title:"二、koa-views",slug:"二、koa-views",children:[]},{level:3,title:"三、koa-static",slug:"三、koa-static",children:[]},{level:3,title:"mvc模式",slug:"mvc模式",children:[]},{level:3,title:"SSE (server send event) 服务器推送数据；",slug:"sse-server-send-event-服务器推送数据",children:[]},{level:3,title:"websocket",slug:"websocket",children:[]},{level:3,title:"socket.io模块",slug:"socket-io模块",children:[]},{level:3,title:"cookie",slug:"cookie",children:[]},{level:3,title:"登录案例",slug:"登录案例",children:[]},{level:3,title:"本地缓存Storage",slug:"本地缓存storage",children:[]},{level:3,title:"通过storage来改造换肤功能",slug:"通过storage来改造换肤功能",children:[]}]}],filePathRelative:"Node.js/Node.js.md",git:{updatedTime:1635519893e3,contributors:[{name:"徐誉雄",email:"xuyuxiong@shinemo.com",commits:1}]}}},6052:(n,s,a)=>{a.r(s),a.d(s,{default:()=>b});var p=a(6252);const t=(0,p.uE)('<h1 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js" aria-hidden="true">#</a> Node.js</h1><h3 id="node-js介绍" tabindex="-1"><a class="header-anchor" href="#node-js介绍" aria-hidden="true">#</a> Node.js介绍</h3><hr><ul><li>Node.js 诞生于2009年，Node.js采用C++语言编写而成，是 一个Javascript的运行环境。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境 ，让JavaScript的运行脱离浏览器端，可以使用JavaScript语言 书写服务器端代码。</li></ul><h3 id="安装node-js" tabindex="-1"><a class="header-anchor" href="#安装node-js" aria-hidden="true">#</a> 安装Node.js</h3>',5),e=(0,p.Uk)("​ "),o={href:"https://nodejs.org",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("Node.js官网"),c=(0,p.Uk)("下载稳定版本,node偶数版本为稳定版本，奇数版本为非稳定版本。"),i=(0,p.uE)('<ul><li><p>mac 直接安装 或者 brew来安装</p></li><li><p>安装完Node.js会自动安装NPM(Node Package Manager)：包管理工具；</p></li><li><p>通过指令 node -v 来查看是否安装完成和查看node版本号；npm -v 来查看npm版本。</p></li></ul><h3 id="使用node-js实现第一个服务器" tabindex="-1"><a class="header-anchor" href="#使用node-js实现第一个服务器" aria-hidden="true">#</a> 使用Node.js实现第一个服务器</h3><p>初步感受Node.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//引入http模块</span>\n<span class="token keyword">let</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//创建一个服务器</span>\n<span class="token keyword">let</span> serve <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//设置端口号</span>\nserve<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h3><p>一、为什么会有模块化</p><ul><li><p>在JavaScript发展初期就是为了实现简单的页面交互逻辑，寥寥数语即，如今随着前端代码日益膨胀</p><p>这时候JavaScript作为嵌入式的脚本语言的定位动摇了，JavaScript却没有为组织代码提供任何明显帮助，JavaScript极其简单的代码组织规范不足以驾驭如此庞大规模的代码；</p></li></ul><p>二、Node.js中的模块化 commonjs规范</p><ul><li><p>CommonJS就是为JS的表现来制定规范，因为js没有模块的功能所以CommonJS应运而生，它希望js可以在任何地方运行，不只是浏览器中。</p><p>1、创建自定义模块</p><ul><li><p>引入一个文件 形式模块</p><p>home.js执行文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//通过require来引入</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./aModule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注意一定要有&quot;./&quot;，文件后缀可加可不加。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>amodule.js文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是amodule模块111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>引入文件夹形式模块</p><ul><li>home.js执行文件</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./aModuledir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//必须加&quot;./&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>​aModuleDir里的index.js文件,会自动查找文件夹下的index.js文件执行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是aModule模块文件夹&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>当然也可以配置默认启动文件，在文件夹内新建package.json来指定执行文件</li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;aModule&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span><span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span><span class="token string">&quot;test.js&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li><li><p>自定义模块的按需导出</p><p>通过module.exports 导出； __dirname , __filename</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span><span class="token string">&quot;我是a的值&quot;</span><span class="token punctuation">,</span>\n    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是导出的b函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>引入导出文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> mymodule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;bModule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mymodule<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\nmymodule<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>或者 通过 exports来导出</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是fn函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>导入文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> myfn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;bModule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fn<span class="token punctuation">;</span>\n<span class="token function">myfn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 或者 通过解构赋值 </span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span> fn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;bModule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>模块加载的优先级 ,先文件再目录；</p></li></ul><p>2、内置模块；</p><p>nodejs内置模块有：Buffer，C/C++Addons，Child Processes，Cluster，Console，Crypto，Debugger，DNS，Domain，Errors，Events，File System，</p><p>Globals，HTTP，HTTPS，Modules，Net，OS，Path，Process，Punycode，Query Strings，Readline，REPL，Stream，String Decoder，Timers，TLS/SSL，TTY，UDP/Datagram，URL， Utilities，V8，VM，ZLIB；内置模块不需要安装，外置模块需要安装</p><h3 id="npm包管理器" tabindex="-1"><a class="header-anchor" href="#npm包管理器" aria-hidden="true">#</a> npm包管理器</h3>',13),u=(0,p.Uk)("NPM(Node Package Manager) 官网的地址是 "),r={href:"https://www.npmjs.com",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("npm官网"),d=(0,p.uE)('<ul><li>npm常用指令； <ul><li>npm init：引导创建一个package.json文件</li><li>npm help(npm -h) ：查看npm帮助信息</li><li>npm version (npm -v) : 查看npm版本；</li><li>npm search：查找</li><li>npm install (npm i)：安装 默认在当前目录，如果没有node_modules 会创建文件夹； <ul><li>npm install module_name -S 或者--save 即 npm install module_name --save 写入dependencies</li><li>npm install module_name -D 或者 —save-dev 即 npm install module_name --save-dev 写入devDependencies</li><li>npm install module_name -g 全局安装(命令行使用)</li><li>指定版本安装模块 npm i module_name @1.0 通过 &quot;@&quot;符号指定；</li></ul></li><li>npm update(npm -up)：更新</li><li>npm remove 或者 npm uninstall：删除</li><li>npm root 查看当前包安装的路径 或者通过 npm root -g 来查看全局安装路径；</li></ul></li></ul><h2 id="fs模块" tabindex="-1"><a class="header-anchor" href="#fs模块" aria-hidden="true">#</a> fs模块</h2><ul><li><p>fs是文件操作模块，所有文件操作都是有同步和异步之分，特点是同步会加上 &quot;Sync&quot; 如：异步读取文件 &quot;readFile&quot;，同步读取文件 &quot;readFileSync&quot;；</p><p>文件操作</p><ul><li><p>文件读取：</p><ul><li>异步读取</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>同步读取文件</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> res <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>文件写入：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//flag配置  &quot;a&quot;:追加写入，&quot;w&quot;:写入，&quot;r&quot;:读取</span>\nfs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&quot;2.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;我是要写入的内容&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>flag<span class="token operator">:</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;写入成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>文件删除</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&quot;2.txt&quot;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;删除成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>复制文件</p><ul><li>先读取文件再写入文件</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mycopy</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span>dest</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">mycopy</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;4.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>修改文件名，目录也可以通过rename来操作</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code></code></pre><div class="line-numbers"></div></div></li></ul><p>fs.rename(&quot;1.txt&quot;,&quot;5.txt&quot;,function (err) { if(err){ console.log(err); }else{ console.log(&quot;修改成功&quot;); } });</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n- 判断文件是否存在\n\n```js\nfs.exists(&quot;4.txt&quot;,function (exists) {\n    console.log(exists);\n})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="buffer缓冲区" tabindex="-1"><a class="header-anchor" href="#buffer缓冲区" aria-hidden="true">#</a> buffer缓冲区</h3><ul><li>buffer的创建 <ul><li>直接创建</li><li>数组创建</li><li>字符串创建</li><li>乱码的处理</li><li>buffer转换tostring</li></ul></li></ul><p>###stream流</p><ul><li>stream流：流与数据处理方面密不可分 <ul><li>流的原理</li><li>流数据的获取 <ul><li>pipe</li><li>data</li><li>end</li></ul></li><li>copy的流方法实现</li><li>加载视图的流方法实现</li></ul></li></ul><h2 id="模板引擎" tabindex="-1"><a class="header-anchor" href="#模板引擎" aria-hidden="true">#</a> 模板引擎</h2><p>模板引擎：模板引擎是web应用中动态生成html的工具，负责将数据和模板结合；常见模板引擎有：ejs、jade（现更名为pug）、Handlebars、Nunjucks、Swig等；使用模板引擎可以是项目结构更加清晰，结构更加合理，让项目维护变得更简单；</p><p>##pug模板引擎使用</p><ul><li><p>安装pug</p><p><code>npm i pug -g</code></p></li><li><p>pug常用语法</p><ul><li>pug语法：通过缩进关系，代替以往html的层级包含关系，如 个简单的静态 可以表达为，注意要统一使用tab或者空格缩进，不要混用</li><li>内联书写层级,a: img</li><li>style属性：div(style={width:”200px”,color:”red”})</li><li>使用”-”来定义变量，使用“=”把变量输出到元素内；</li><li>通过 #{variable} 插 相应的变量值</li><li>html 元素属性通过在标签右边通过括号包含（可以通过判断来添加）</li><li>文本通过在 字前 添加竖线符号“|”可让 jade 原样输出内容 在html标签标记后 通过空格隔开 本内容 在html标签标记后通过添加引号“.”添加块级文本</li><li>注释：可以通过双斜杠进 注释，jade有3种注释 式，可以分别对应输出html 注释、 输出html注释、块级html注释</li><li>循环：each val in [1,2,3]</li><li>判断语句：”if else” case when default</li><li>mixin：混合模式</li><li><strong>include</strong> common/footer.pug 通过include引入外部文件</li></ul></li><li><p>练习工具 hade；</p><p><code>npm i hade -g</code></p></li></ul><h2 id="nunjucks模板引擎在koa中的应用" tabindex="-1"><a class="header-anchor" href="#nunjucks模板引擎在koa中的应用" aria-hidden="true">#</a> nunjucks模板引擎在koa中的应用</h2><ul><li>安装koa-nunjucks-2</li></ul><h2 id="koa介绍" tabindex="-1"><a class="header-anchor" href="#koa介绍" aria-hidden="true">#</a> koa介绍</h2><p>​ koa是express原班人马打造的轻量、健壮、富有表现力的nodejs框架。目前koa有koa1和koa2两个版本；koa2依赖Node.js 7.6.0或者更高版本；koa不在内核方法中绑定任何中间件，它仅仅是一个轻量级的函数库，几乎所有功能都必须通过第三方插件来实现。</p><h3 id="koa使用" tabindex="-1"><a class="header-anchor" href="#koa使用" aria-hidden="true">#</a> koa使用</h3><ul><li><p>koa安装</p><p>$ npm i koa</p></li><li><p>一个简单的koa服务器</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>Koa 利用中间件 控制&quot;上游&quot;，调用&quot;下游“；</p><ul><li><p>koa是包含一组中间件函数的对象；可以将app.use里的函数理解成中间件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//这里的middleWare函数就是一个中间件</span>\n<span class="token keyword">let</span> <span class="token function-variable function">middleWare</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;first middleWare&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middleWare<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>通过next()将控制转交给另一个中间件；</p></li><li><p>上述过程也可以通过&quot;洋葱模型“来解释中间件执行顺序</p></li></ul></li></ul><h3 id="application对象" tabindex="-1"><a class="header-anchor" href="#application对象" aria-hidden="true">#</a> Application对象</h3><ul><li><p>application是koa的实例 简写app</p></li><li><p>app.use 将给定的中间件方法添加到此应用程序,分为同步和异步，异步：通过es7中的async和await来处理</p></li><li><p>app.listen设置服务器端口；</p></li><li><p>app.on 错误处理；</p></li></ul><h3 id="上下文context对象常用属性及方法" tabindex="-1"><a class="header-anchor" href="#上下文context对象常用属性及方法" aria-hidden="true">#</a> 上下文context对象常用属性及方法</h3><ul><li><p>context 将node中的request和response 封装到一个对象中，并提供一些新的api提供给用户进行操作；</p><ul><li>ctx.app:应用程序实例引用,等同于app;</li><li>ctx.req:Node 的 <code>request</code> 对象.</li><li>ctx.res:Node 的 <code>response</code> 对象.</li><li>ctx.request:koa中的Request对象；</li><li>ctx.response:koa中的response对象；</li><li>ctx.state：对象命名空间，通过中间件传递信息；</li><li>ctx.throw:抛出错误；</li></ul></li><li><p>request及response别名</p><ul><li><p>koa会把ctx.requset上的属性直接挂载到ctx上如：</p><ul><li><code> ctx.header</code> //头信息；</li><li><code>ctx.headers</code></li><li><code>ctx.method</code></li><li><code>ctx.method=</code></li><li><code>ctx.url</code></li><li><code>ctx.url=</code></li></ul><p>…...</p></li><li><p>同样也会把ctx.response上的属性直接挂载到ctx上如：</p><ul><li><code>ctx.body</code></li><li><code>ctx.body=</code></li><li><code>ctx.status</code></li><li><code>ctx.status=</code> ….</li></ul></li><li><p>ctx.status 获取响应状态。默认情况下，<code>response.status</code> 设置为 <code>404</code> 而不是像 node 的 <code>res.statusCode</code> 那样默认为 <code>200</code>。</p></li><li><p>http状态码：1xx(消息)、2xx(成功)、3xx(重定向)、4xx(请求错误)、5xx和6xx(服务器错误)</p></li><li><p>常见http状态码 （302 location 跳转）</p><table><tr><td>HTTP状态码</td><td>描述</td></tr><tr><td>100</td><td>继续。继续响应剩余部分，进行提交请求</td></tr><tr><td>200</td><td>成功</td></tr><tr><td>301</td><td>永久移动。请求资源永久移动到新位置</td></tr><tr><td>302</td><td>临时移动。请求资源零时移动到新位置</td></tr><tr><td>304</td><td>未修改。请求资源对比上次未被修改，响应中不包含资源内容</td></tr><tr><td>401</td><td>未授权，需要身份验证</td></tr><tr><td>403</td><td>禁止。请求被拒绝</td></tr><tr><td>404</td><td>未找到，服务器未找到需要资源</td></tr><tr><td>500</td><td>服务器内部错误。服务器遇到错误，无法完成请求</td></tr><tr><td>503</td><td>服务器不可用。零时服务过载，无法处理请求</td></tr></table></li></ul><h3 id="koa常用中间件介绍" tabindex="-1"><a class="header-anchor" href="#koa常用中间件介绍" aria-hidden="true">#</a> koa常用中间件介绍</h3><h3 id="一、koa-router" tabindex="-1"><a class="header-anchor" href="#一、koa-router" aria-hidden="true">#</a> 一、koa-router</h3><ul><li><p>路由是引导匹配之意，是匹配url到相应处理程序的活动。</p></li><li><p>koa-router安装</p><p><code>npm i koa-router -S</code></p></li><li><p>Koa-router使用</p></li><li><p>Koa-router推荐使用RESTful架构API。Restful的全称是Representational State Transfer 即表现层转移。</p><ul><li><p>RESTful是一种软件架构风格、设计风格，而<strong>不是</strong>标准，只是提供了一组设计原则和约束条件。基于这个风格设计可以更简洁，更有层次;</p></li><li><p>非RESTful架构api：</p></li><li><p>使用RESTful架构设计api</p></li><li><p>REST设计一般符合如下条件：</p><ul><li>程序或者应用的事物都应该被抽象为资源</li><li>每个资源对应唯一的URI(uri是统一资源标识符)</li><li>使用统一接口对资源进行操作</li><li>对资源的各种操作不会改变资源标识</li><li>所有操作都是无状态的</li></ul></li></ul></li></ul></li></ul><h3 id="二、koa-views" tabindex="-1"><a class="header-anchor" href="#二、koa-views" aria-hidden="true">#</a> 二、koa-views</h3><ul><li><p>Koa-views用于加载html模板文件；</p><ul><li><p>安装 koa-views</p><p><code>npm i koa-views -S</code></p></li><li><p>使用koa-view</p></li></ul></li></ul><h3 id="三、koa-static" tabindex="-1"><a class="header-anchor" href="#三、koa-static" aria-hidden="true">#</a> 三、koa-static</h3><ul><li><p>koa-static 是用于加载静态资源的中间件，通过它可以加载css、js等静态资源；</p></li><li><p>安装 koa-static</p><p><code>npm i koa-static</code></p></li><li><p>使用koa-static</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa-static&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">&quot;/static&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//加载静态文件的目录</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="mvc模式" tabindex="-1"><a class="header-anchor" href="#mvc模式" aria-hidden="true">#</a> mvc模式</h3><ul><li>mvc 即 model 、controller、view；mvc模式将model、view、controller分离；使用mvc分层是系统更加灵活，扩展性更强。让程序更加直观、复用性更强、可维护性更强。 <ul><li>model 负责数据访问；</li><li>controller负责消息处理；</li><li>view 负责视图呈现；</li></ul></li><li>利用mvc模式规划项目</li></ul><h3 id="sse-server-send-event-服务器推送数据" tabindex="-1"><a class="header-anchor" href="#sse-server-send-event-服务器推送数据" aria-hidden="true">#</a> SSE (server send event) 服务器推送数据；</h3><p>​ Server-sent events:使用server-sent 事件的方法,服务器可以在任何时刻向我们的web页面推送数据和信息.这些被推送进来的信息可以在这个页面上作为事件+data来处理.</p><ul><li><p>服务端设置</p><ul><li><p>设置头部</p><p><code>&quot;Content-type&quot;,&quot;text/event-stream&quot;</code></p></li><li><p>返还数据格式</p><p>​ <code>data:</code>声明数据开始</p><p>​ <code>\\r\\n\\r\\n</code>标志数据结尾</p></li></ul></li><li><p>前端获取</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    source<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接建立...&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// console.log(source)</span>\n    source<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evnet</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据是：&quot;</span><span class="token punctuation">,</span>evnet<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    source<span class="token punctuation">.</span><span class="token function-variable function">error</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;err&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>readyState 代表连接状态: <ul><li>0 <code>CONNECTING</code> (<code>0</code>) 。</li><li>1 <code>OPEN</code> (<code>1</code>),</li><li>2 CLOSED<code> (</code>2`)</li></ul></li></ul></li></ul><h3 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> websocket</h3><ul><li><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议;</p></li><li><p>创建websocket服务器；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> WebSocketServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Server<span class="token punctuation">,</span>\nwss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8181</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;client connected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      \t<span class="token comment">//监听接收的数据</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \t<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> somedata <span class="token operator">=</span> <span class="token punctuation">{</span>\n            name<span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>\n            age<span class="token operator">:</span><span class="token number">20</span>\n        <span class="token punctuation">}</span>\n        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>somedata<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><p>客户端代码</p><ul><li>建立握手</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://localhost:8181&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>打开协议</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\tws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>发送数据到服务端</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;客户端数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>关闭协议:关闭协议后不能发送数据</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>接收消息</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n         <span class="token comment">// console.log(e.data);</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><h3 id="socket-io模块" tabindex="-1"><a class="header-anchor" href="#socket-io模块" aria-hidden="true">#</a> socket.io模块</h3><ul><li><p>服务端</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;socket.io&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>客户端</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> socket <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;clientfn&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello i am client&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h3><ul><li><p>cookie是http协议下，服务端或者脚本可以维护客户端信息的一种方式。</p></li><li><p>koa中cookie的使用</p><ul><li>储存cookie的值；</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>获取cookie的值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>options常用设置 <ul><li><code>maxAge</code> 一个数字表示从 Date.now() 得到的毫秒数</li><li><code>expires</code> cookie 过期的 <code>Date</code></li><li><code>path</code> cookie 路径, 默认是<code>&#39;/&#39;</code></li><li><code>domain</code> cookie 域名</li><li><code>secure</code> 安全 cookie 设置后只能通过https来传递cookie</li><li><code>httpOnly</code> 服务器可访问 cookie, 默认是 <strong>true</strong></li><li><code>overwrite</code> 一个布尔值，表示是否覆盖以前设置的同名的 cookie (默认是 <strong>false</strong>). 如果是 true, 在同一个请求中设置相同名称的所有 Cookie</li></ul></li></ul></li></ul><h3 id="登录案例" tabindex="-1"><a class="header-anchor" href="#登录案例" aria-hidden="true">#</a> 登录案例</h3><ul><li><p>验证用户名密码是否正确；</p></li><li><p>实现登录功能，通过记住我实现七天免登录；</p></li></ul><p>###通过本地cookie实现记录换肤功能</p><ul><li><p>客户端cookie使用方式；</p><ul><li><p>设置</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">&quot;key=value&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>key和value是包含在一个字符串中</p><ul><li>key包含字段 <ul><li>[name] 这个name为自己取的cookie名称，同名的值会覆盖</li><li>domain 所属域名</li><li>path 所属路径</li><li>Expires/Max-Age 到期时间/持续时间 (单位是秒)</li><li>http-only 是否只作为http时使用，如果为true，那么客户端能够在http请求和响应中进行传输，但时客户端浏览器不能使用js去读取或修改</li></ul></li></ul></li><li><p>多个key=value使用 ; （分号）分隔</p></li></ul></li><li><p>获取</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>返回值是当前域名下的所有cookie，并按照某种格式组织的字符串 ：key=value;key1=value1;......keyn=valuen</p></li><li><p>封装</p><ul><li>设置cookie封装</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//设置cookie</span>\n<span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>value<span class="token punctuation">,</span>options<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> cookieData <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> options<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>options<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        cookieData <span class="token operator">+=</span> str<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> cookieData<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>获取cookie</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//获取Cookie</span>\n<span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> arr <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> items <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>几种皮肤背景色</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&quot;white&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;rgb(204,232,207)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rgb(200,200,169)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rgb(114,111,128)&quot;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul></li></ul><p>###客户端操作cookie特点</p><ul><li>浏览器会主动存储接收到的 set-cookie 头信息的值</li><li>有时效性；</li><li>可以设置 http-only 属性为 true 来禁止客户端代码（js）修改该值</li></ul><h3 id="本地缓存storage" tabindex="-1"><a class="header-anchor" href="#本地缓存storage" aria-hidden="true">#</a> 本地缓存Storage</h3><ul><li><p>localStorage及sessionStorage使用</p><ul><li><p>设置</p><p>setItem(key, value) 添加或更新（如果数据项中已存在该key）数据项中指定key的value</p></li><li><p>获取</p><p>getItem(key) 获取数据项中指定key对应的value</p></li><li><p>移出指定数据</p><p>removeItem(key) 删除数据项中指定key的value</p></li><li><p>清空所有数据</p><p>clear() 清空所有数据项</p></li></ul></li></ul><h3 id="通过storage来改造换肤功能" tabindex="-1"><a class="header-anchor" href="#通过storage来改造换肤功能" aria-hidden="true">#</a> 通过storage来改造换肤功能</h3><p>###通过storage实现添加歌曲列表功能</p><ul><li>通过stroage来处理本地多开音乐页面得问题；</li><li>实现删除及删除所有列表的功能；</li></ul><p>###本地存储异同</p><ul><li><p>共同点</p></li><li><p>localStorage和sessionStorage和cookie共同点</p><ul><li>同域（同源策略）限制：同源策略：请求与响应的 协议、域名、端口都相同 则时同源，否则为 跨源/跨域</li><li>存储的内容都会转为字符串格式</li><li>都有存储大小限制</li></ul></li><li><p>localStorage和sessionStorage共同点</p><ul><li>API相同</li><li>存储大小限制一样基本类似</li><li>无个数限制</li></ul></li><li><p>不同点</p></li><li><p>localStorage</p><ul><li>没有有效期，除非删除，否则一直存在</li><li>同域下页面共享</li><li>支持 storage 事件</li></ul></li><li><p>sessionStorage</p><ul><li>浏览器关闭，自动销毁</li><li>页面私有</li><li>不支持 storage 事件</li></ul></li><li><p>cookie</p><ul><li>浏览器也会在每次请求的时候主动组织所有域下的cookie到请求头 cookie 中，发送给服务器端</li><li>浏览器会主动存储接收到的 set-cookie 头信息的值</li><li>可以设置 http-only 属性为 true 来禁止客户端代码（js）修改该值</li><li>可以设置有效期 (默认浏览器关闭自动销毁)(不同浏览器有所不同)</li><li>同域下个数有限制，最好不要超过50个(不同浏览器有所不同)</li><li>单个cookie内容大小有限制，最好不要超过4000字节(不同浏览器有所不同)</li></ul></li></ul>',49),m={},b=(0,a(3744).Z)(m,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,(0,p._)("a",o,[l,(0,p.Wm)(a)]),c]),i,(0,p._)("p",null,[u,(0,p._)("a",r,[k,(0,p.Wm)(a)])]),d],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);