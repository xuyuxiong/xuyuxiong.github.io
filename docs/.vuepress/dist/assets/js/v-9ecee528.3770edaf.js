"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[6829],{1998:(e,t,r)=>{r.r(t),r.d(t,{data:()=>n});const n={key:"v-9ecee528",path:"/frontend/RegExp.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"frontend/RegExp.md",git:{updatedTime:1635519893e3,contributors:[{name:"徐誉雄",email:"xuyuxiong@shinemo.com",commits:1}]}}},166:(e,t,r)=>{r.r(t),r.d(t,{default:()=>i});var n=r(6252);const a=(0,n._)("p",null,"// 正则修饰符 // var r = /abc/igm; // r.lastIndex; // r.source; // 实例方法 // /cat/.test() /cat/.exec() // 元字符 // 1.点字符 // 2.位置字符 ^ $ // 3.选择符",-1),l=(0,n._)("p",null,[(0,n.Uk)("// 需要转义的元字符 ^ . [ $ () | * + ? { "),(0,n._)("br"),(0,n.Uk)(" // 字符类 // 脱字符^ []匹配其中一个就可以 [^]除了字符类中的字符 方括号中没有其他字符就表示匹配一切 // 连字符- [a-z.,] [1-31]代表1到3")],-1),s=(0,n._)("p",null,"// 预定义模式 // \\d \\D // \\w 相当于[A-Za-z0-9_] \\W // \\s 匹配空格包括换行符 制表符 空格符 // \\b 匹配词的边界",-1),u=(0,n._)("p",null,"// 重复类 // {n, m} // ? 0次或1次 // * 0次或多次 // + 1次或多次",-1),c=(0,n._)("p",null,"// 贪婪模式 // ? + * +? *? ??",-1),o=(0,n._)("p",null,"// 组匹配 // 非捕获组 (?:x) // 先行断言 x(?=y) 匹配内容后面跟着某个条件 // 先行否定断言 x(?!y) 匹配内容后面不跟着某个条件",-1),p={},i=(0,r(3744).Z)(p,[["render",function(e,t){return(0,n.wg)(),(0,n.iD)(n.HY,null,[a,l,s,u,c,o],64)}]])},3744:(e,t)=>{t.Z=(e,t)=>{for(const[r,n]of t)e[r]=n;return e}}}]);