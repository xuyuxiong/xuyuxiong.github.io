"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[7980],{3253:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-2af548c4",path:"/vue/VueBase.html",title:"Vue base",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Vue.js是什么",slug:"vue-js是什么",children:[]},{level:2,title:"声明式渲染",slug:"声明式渲染",children:[]},{level:2,title:"处理用户输入",slug:"处理用户输入",children:[]},{level:2,title:"条件和循环",slug:"条件和循环",children:[]},{level:2,title:"组件化应用构建",slug:"组件化应用构建",children:[]},{level:2,title:"与自定义元素的关系",slug:"与自定义元素的关系",children:[]},{level:2,title:"创建一个应用实例",slug:"创建一个应用实例",children:[]},{level:2,title:"根组件",slug:"根组件",children:[]},{level:2,title:"组件实例 property",slug:"组件实例-property",children:[]},{level:2,title:"生命周期钩子",slug:"生命周期钩子",children:[]},{level:2,title:"模板语法",slug:"模板语法",children:[]},{level:2,title:"插值",slug:"插值",children:[{level:3,title:"文本",slug:"文本",children:[]},{level:3,title:"原始HTML",slug:"原始html",children:[]},{level:3,title:"Attribute",slug:"attribute",children:[]},{level:3,title:"使用JavaScript表达式",slug:"使用javascript表达式",children:[]}]},{level:2,title:"指令",slug:"指令",children:[]},{level:2,title:"参数",slug:"参数",children:[]},{level:2,title:"动态参数",slug:"动态参数",children:[]},{level:2,title:"修饰符",slug:"修饰符",children:[]},{level:2,title:"缩写",slug:"缩写",children:[]},{level:2,title:"Data Property",slug:"data-property",children:[]},{level:2,title:"方法",slug:"方法",children:[]},{level:2,title:"计算属性和侦听器",slug:"计算属性和侦听器",children:[{level:3,title:"计算属性",slug:"计算属性",children:[]},{level:3,title:"计算属性缓存 vs 方法",slug:"计算属性缓存-vs-方法",children:[]},{level:3,title:"计算属性的 Setter",slug:"计算属性的-setter",children:[]},{level:3,title:"侦听器",slug:"侦听器",children:[]}]},{level:2,title:"Class与Style绑定",slug:"class与style绑定",children:[{level:3,title:"绑定HTML Class",slug:"绑定html-class",children:[]},{level:3,title:"绑定内联样式",slug:"绑定内联样式",children:[]}]},{level:2,title:"条件渲染",slug:"条件渲染",children:[{level:3,title:"v-if vs v-show",slug:"v-if-vs-v-show",children:[]},{level:3,title:"v-if 与 v-for 一起使用",slug:"v-if-与-v-for-一起使用",children:[]}]},{level:2,title:"列表渲染",slug:"列表渲染",children:[]},{level:2,title:"事件处理",slug:"事件处理",children:[{level:3,title:"事件处理方法",slug:"事件处理方法",children:[]},{level:3,title:"内联处理器中的方法",slug:"内联处理器中的方法",children:[]},{level:3,title:"多事件处理器",slug:"多事件处理器",children:[]},{level:3,title:"事件修饰符",slug:"事件修饰符",children:[]},{level:3,title:"按键修饰符",slug:"按键修饰符",children:[]},{level:3,title:"按键别名",slug:"按键别名",children:[]},{level:3,title:"系统修饰符",slug:"系统修饰符",children:[]},{level:3,title:".exact 修饰符",slug:"exact-修饰符",children:[]},{level:3,title:"鼠标按钮修饰符",slug:"鼠标按钮修饰符",children:[]}]},{level:2,title:"表单输入绑定",slug:"表单输入绑定",children:[{level:3,title:"修饰符",slug:"修饰符-1",children:[]}]},{level:2,title:"组件基础",slug:"组件基础",children:[{level:3,title:"组件的复用",slug:"组件的复用",children:[]},{level:3,title:"通过 Prop 向子组件传递数据",slug:"通过-prop-向子组件传递数据",children:[]},{level:3,title:"监听子组件事件",slug:"监听子组件事件",children:[]},{level:3,title:"使用事件抛出一个值",slug:"使用事件抛出一个值",children:[]},{level:3,title:"在组件上使用 v-model",slug:"在组件上使用-v-model",children:[]},{level:3,title:"通过插槽分发内容",slug:"通过插槽分发内容",children:[]},{level:3,title:"动态组件",slug:"动态组件",children:[]},{level:3,title:"解析 DOM 模板时的注意事项",slug:"解析-dom-模板时的注意事项",children:[]}]},{level:2,title:"组件注册",slug:"组件注册",children:[{level:3,title:"全局注册",slug:"全局注册",children:[]},{level:3,title:"局部注册",slug:"局部注册",children:[]},{level:3,title:"模块系统",slug:"模块系统",children:[]}]},{level:2,title:"Props",slug:"props",children:[{level:3,title:"Prop类型",slug:"prop类型",children:[]},{level:3,title:"单项数据流",slug:"单项数据流",children:[]},{level:3,title:"Prop验证",slug:"prop验证",children:[]},{level:3,title:"类型检查",slug:"类型检查",children:[]},{level:3,title:"非 Prop 的 Attribute",slug:"非-prop-的-attribute",children:[]},{level:3,title:"禁用 Attribute 继承",slug:"禁用-attribute-继承",children:[]},{level:3,title:"多个根节点上的 Attribute 继承",slug:"多个根节点上的-attribute-继承",children:[]}]},{level:2,title:"自定义事件",slug:"自定义事件",children:[{level:3,title:"验证抛出的事件",slug:"验证抛出的事件",children:[]},{level:3,title:"多个 v-model 绑定",slug:"多个-v-model-绑定",children:[]}]},{level:2,title:"插槽",slug:"插槽",children:[{level:3,title:"插槽内容",slug:"插槽内容",children:[]},{level:3,title:"渲染作用域",slug:"渲染作用域",children:[]},{level:3,title:"备用内容",slug:"备用内容",children:[]},{level:3,title:"具名插槽",slug:"具名插槽",children:[]},{level:3,title:"作用域插槽",slug:"作用域插槽",children:[]},{level:3,title:"独占默认插槽的缩写语法",slug:"独占默认插槽的缩写语法",children:[]},{level:3,title:"解构插槽 Prop",slug:"解构插槽-prop",children:[]},{level:3,title:"动态插槽名",slug:"动态插槽名",children:[]},{level:3,title:"具名插槽的缩写",slug:"具名插槽的缩写",children:[]}]},{level:2,title:"Provide/Inject",slug:"provide-inject",children:[{level:3,title:"处理响应性",slug:"处理响应性",children:[]}]},{level:2,title:"动态组件&异步组件",slug:"动态组件-异步组件",children:[{level:3,title:"在动态组件上使用 keep-alive",slug:"在动态组件上使用-keep-alive",children:[]},{level:3,title:"异步组件",slug:"异步组件",children:[]}]},{level:2,title:"模板引用",slug:"模板引用",children:[]},{level:2,title:"Setup",slug:"setup",children:[{level:3,title:"访问组件的 property",slug:"访问组件的-property",children:[]},{level:3,title:"合模板使用",slug:"合模板使用",children:[]},{level:3,title:"使用渲染函数",slug:"使用渲染函数",children:[]},{level:3,title:"使用this",slug:"使用this",children:[]}]},{level:2,title:"Provide/Inject",slug:"provide-inject-1",children:[{level:3,title:"使用 Provide",slug:"使用-provide",children:[]},{level:3,title:"使用 inject",slug:"使用-inject",children:[]},{level:3,title:"添加响应性",slug:"添加响应性",children:[]},{level:3,title:"修改响应式 property",slug:"修改响应式-property",children:[]}]},{level:2,title:"自定义指令",slug:"自定义指令",children:[{level:3,title:"钩子函数",slug:"钩子函数",children:[]},{level:3,title:"动态指令参数",slug:"动态指令参数",children:[]},{level:3,title:"函数简写",slug:"函数简写",children:[]},{level:3,title:"对象字面量",slug:"对象字面量",children:[]}]},{level:2,title:"渲染函数",slug:"渲染函数",children:[]}],filePathRelative:"vue/VueBase.md",git:{updatedTime:1635519893e3,contributors:[{name:"徐誉雄",email:"xuyuxiong@shinemo.com",commits:1}]}}},1638:(a,n,s)=>{s.r(n),s.d(n,{default:()=>b});var t=s(6252),e=s(3577);const p=(0,t.uE)('<h1 id="vue-base" tabindex="-1"><a class="header-anchor" href="#vue-base" aria-hidden="true">#</a> Vue base</h1><h2 id="vue-js是什么" tabindex="-1"><a class="header-anchor" href="#vue-js是什么" aria-hidden="true">#</a> Vue.js是什么</h2><p>Vue是一套用于构建用户界面的渐进式框架</p><h2 id="声明式渲染" tabindex="-1"><a class="header-anchor" href="#声明式渲染" aria-hidden="true">#</a> 声明式渲染</h2><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>counter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  Counter: {{ counter }}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="处理用户输入" tabindex="-1"><a class="header-anchor" href="#处理用户输入" aria-hidden="true">#</a> 处理用户输入</h2><p>为了让用户和应用进行交互，我们可以用 v-on 指令添加一个事件监听器，通过它调用在实例中定义的方法</p><h2 id="条件和循环" tabindex="-1"><a class="header-anchor" href="#条件和循环" aria-hidden="true">#</a> 条件和循环</h2><h2 id="组件化应用构建" tabindex="-1"><a class="header-anchor" href="#组件化应用构建" aria-hidden="true">#</a> 组件化应用构建</h2><h2 id="与自定义元素的关系" tabindex="-1"><a class="header-anchor" href="#与自定义元素的关系" aria-hidden="true">#</a> 与自定义元素的关系</h2><p>Vue 组件非常类似于自定义元素——它是 Web 组件规范的一部分，这是因为 Vue 的组件语法部分参考了该规范</p><h2 id="创建一个应用实例" tabindex="-1"><a class="header-anchor" href="#创建一个应用实例" aria-hidden="true">#</a> 创建一个应用实例</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 选项</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="根组件" tabindex="-1"><a class="header-anchor" href="#根组件" aria-hidden="true">#</a> 根组件</h2><p>传递给 createApp 的选项用于配置根组件。当我们挂载应用时，该组件被用作渲染的起点(根组件实例)</p><h2 id="组件实例-property" tabindex="-1"><a class="header-anchor" href="#组件实例-property" aria-hidden="true">#</a> 组件实例 property</h2><p>props、data、computed、inject、setup... 内置property $attr $emit...</p><h2 id="生命周期钩子" tabindex="-1"><a class="header-anchor" href="#生命周期钩子" aria-hidden="true">#</a> 生命周期钩子</h2><p>beforeCreate created beforeMount mounted beforeUpdate updated beforeUnmount unmounted</p><h2 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法" aria-hidden="true">#</a> 模板语法</h2><h2 id="插值" tabindex="-1"><a class="header-anchor" href="#插值" aria-hidden="true">#</a> 插值</h2><h3 id="文本" tabindex="-1"><a class="header-anchor" href="#文本" aria-hidden="true">#</a> 文本</h3>',23),l=(0,t.uE)('<h3 id="原始html" tabindex="-1"><a class="header-anchor" href="#原始html" aria-hidden="true">#</a> 原始HTML</h3><p>v-html</p><h3 id="attribute" tabindex="-1"><a class="header-anchor" href="#attribute" aria-hidden="true">#</a> Attribute</h3><p>v-bind</p><h3 id="使用javascript表达式" tabindex="-1"><a class="header-anchor" href="#使用javascript表达式" aria-hidden="true">#</a> 使用JavaScript表达式</h3><h2 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h2><p>指令 (Directives) 是带有 v- 前缀的特殊 attribute</p><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示</p><h2 id="动态参数" tabindex="-1"><a class="header-anchor" href="#动态参数" aria-hidden="true">#</a> 动态参数</h2><p>指令参数中使用 JavaScript 表达式，方法是用方括号括起来 v-bind:[attributeName]=&quot;url&quot;</p><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符" aria-hidden="true">#</a> 修饰符</h2><p>修饰符 (modifier) 是以半角句号 . 指明的特殊后缀 v-on:submit.prevent=&quot;onSubmit&quot;</p><h2 id="缩写" tabindex="-1"><a class="header-anchor" href="#缩写" aria-hidden="true">#</a> 缩写</h2>',14),c=(0,t.Uk)("v-bind 缩写 "),o=["href"],i=(0,t.Uk)(" -on 缩写 "),u=(0,t.uE)('<h2 id="data-property" tabindex="-1"><a class="header-anchor" href="#data-property" aria-hidden="true">#</a> Data Property</h2><p>组件的 data 选项是一个函数</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><p>我们用 methods 选项向组件实例添加方法，它应该是一个包含所需方法的对象</p><h2 id="计算属性和侦听器" tabindex="-1"><a class="header-anchor" href="#计算属性和侦听器" aria-hidden="true">#</a> 计算属性和侦听器</h2><h3 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性" aria-hidden="true">#</a> 计算属性</h3><p>任何包含响应式数据的复杂逻辑，你都应该使用计算属性</p><h3 id="计算属性缓存-vs-方法" tabindex="-1"><a class="header-anchor" href="#计算属性缓存-vs-方法" aria-hidden="true">#</a> 计算属性缓存 vs 方法</h3><p>计算属性是基于它们的反应依赖关系缓存的</p><h3 id="计算属性的-setter" tabindex="-1"><a class="header-anchor" href="#计算属性的-setter" aria-hidden="true">#</a> 计算属性的 Setter</h3><p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter</p><h3 id="侦听器" tabindex="-1"><a class="header-anchor" href="#侦听器" aria-hidden="true">#</a> 侦听器</h3><p>通常更好的做法是使用计算属性而不是命令式的 watch 回调</p><h2 id="class与style绑定" tabindex="-1"><a class="header-anchor" href="#class与style绑定" aria-hidden="true">#</a> Class与Style绑定</h2><h3 id="绑定html-class" tabindex="-1"><a class="header-anchor" href="#绑定html-class" aria-hidden="true">#</a> 绑定HTML Class</h3><h4 id="对象语法" tabindex="-1"><a class="header-anchor" href="#对象语法" aria-hidden="true">#</a> 对象语法</h4><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>static<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ active: isActive, <span class="token punctuation">&#39;</span>text-danger<span class="token punctuation">&#39;</span>: hasError }<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="数组语法" tabindex="-1"><a class="header-anchor" href="#数组语法" aria-hidden="true">#</a> 数组语法</h4><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[activeClass, errorClass]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- 三元表达式 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[isActive ? activeClass : <span class="token punctuation">&#39;</span><span class="token punctuation">&#39;</span>, errorClass]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    activeClass<span class="token operator">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">,</span>\n    errorClass<span class="token operator">:</span> <span class="token string">&#39;text-danger&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="绑定内联样式" tabindex="-1"><a class="header-anchor" href="#绑定内联样式" aria-hidden="true">#</a> 绑定内联样式</h3><h4 id="对象语法-1" tabindex="-1"><a class="header-anchor" href="#对象语法-1" aria-hidden="true">#</a> 对象语法</h4><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{color: activeColor, fontSize: fontSize + <span class="token punctuation">&#39;</span>px<span class="token punctuation">&#39;</span>}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="数组语法-1" tabindex="-1"><a class="header-anchor" href="#数组语法-1" aria-hidden="true">#</a> 数组语法</h4><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[baseStyles, overridingStyles]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="多重值" tabindex="-1"><a class="header-anchor" href="#多重值" aria-hidden="true">#</a> 多重值</h4><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ display: [<span class="token punctuation">&#39;</span>-webkit-box<span class="token punctuation">&#39;</span>, <span class="token punctuation">&#39;</span>-ms-flexbox<span class="token punctuation">&#39;</span>, <span class="token punctuation">&#39;</span>flex<span class="token punctuation">&#39;</span>] }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染" aria-hidden="true">#</a> 条件渲染</h2><p>v-if v-else v-else-if v-show 只是简单地切换元素的 CSS property display</p><h3 id="v-if-vs-v-show" tabindex="-1"><a class="header-anchor" href="#v-if-vs-v-show" aria-hidden="true">#</a> v-if vs v-show</h3><p>v-if 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建 v-if 是惰性的 初始条件为假不渲染 v-show 更高的初始渲染开销 需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好</p><h3 id="v-if-与-v-for-一起使用" tabindex="-1"><a class="header-anchor" href="#v-if-与-v-for-一起使用" aria-hidden="true">#</a> v-if 与 v-for 一起使用</h3><p>一起使用时，v-if 具有比 v-for 更高的优先级</p><h2 id="列表渲染" tabindex="-1"><a class="header-anchor" href="#列表渲染" aria-hidden="true">#</a> 列表渲染</h2><p>用 v-for 把一个数组对应为一组元素</p><h2 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h2><p>我们可以使用 v-on 指令 (通常缩写为 @ 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScript</p><h3 id="事件处理方法" tabindex="-1"><a class="header-anchor" href="#事件处理方法" aria-hidden="true">#</a> 事件处理方法</h3><p>许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 v-on 指令中是不可行的。因此 v-on 还可以接收一个需要调用的方法名称</p><h3 id="内联处理器中的方法" tabindex="-1"><a class="header-anchor" href="#内联处理器中的方法" aria-hidden="true">#</a> 内联处理器中的方法</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inline-handler<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>say(<span class="token punctuation">&#39;</span>hi<span class="token punctuation">&#39;</span>)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Say hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>say(<span class="token punctuation">&#39;</span>what<span class="token punctuation">&#39;</span>)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Say what<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="多事件处理器" tabindex="-1"><a class="header-anchor" href="#多事件处理器" aria-hidden="true">#</a> 多事件处理器</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>one($event), two($event)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  Submit\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符" aria-hidden="true">#</a> 事件修饰符</h3><p>.stop .prevent .once</p>',45),r=(0,t.Uk)(" .capture"),d=(0,t.Uk)(" .self  .passive "),k=(0,t.uE)(' 这个 .passive 修饰符尤其能够提升移动端的性能 <h3 id="按键修饰符" tabindex="-1"><a class="header-anchor" href="#按键修饰符" aria-hidden="true">#</a> 按键修饰符</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="按键别名" tabindex="-1"><a class="header-anchor" href="#按键别名" aria-hidden="true">#</a> 按键别名</h3><p>.enter .tab .delete (捕获“删除”和“退格”键) .esc .space .up .down .left .right</p><h3 id="系统修饰符" tabindex="-1"><a class="header-anchor" href="#系统修饰符" aria-hidden="true">#</a> 系统修饰符</h3><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。 .ctrl .alt .shift .meta</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- Alt + Enter --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.alt.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clear<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="exact-修饰符" tabindex="-1"><a class="header-anchor" href="#exact-修饰符" aria-hidden="true">#</a> .exact 修饰符</h3><p>.exact 修饰符允许你控制由精确的系统修饰符组合触发的事件</p><h3 id="鼠标按钮修饰符" tabindex="-1"><a class="header-anchor" href="#鼠标按钮修饰符" aria-hidden="true">#</a> 鼠标按钮修饰符</h3><p>这些修饰符会限制处理函数仅响应特定的鼠标按钮 .left .right .middle</p><h2 id="表单输入绑定" tabindex="-1"><a class="header-anchor" href="#表单输入绑定" aria-hidden="true">#</a> 表单输入绑定</h2><p>可以用 v-model 指令在表单 input、textarea 及 select 元素上创建双向数据绑定</p><h3 id="修饰符-1" tabindex="-1"><a class="header-anchor" href="#修饰符-1" aria-hidden="true">#</a> 修饰符</h3><p>.lazy 添加 lazy 修饰符，从而转为在 change 事件_之后_进行同步 .number 自动将用户的输入值转为数值类型 .trim 自动过滤用户输入的首尾空白字符</p><h2 id="组件基础" tabindex="-1"><a class="header-anchor" href="#组件基础" aria-hidden="true">#</a> 组件基础</h2><h3 id="组件的复用" tabindex="-1"><a class="header-anchor" href="#组件的复用" aria-hidden="true">#</a> 组件的复用</h3><p>可以将组件进行任意次数的复用</p><h3 id="通过-prop-向子组件传递数据" tabindex="-1"><a class="header-anchor" href="#通过-prop-向子组件传递数据" aria-hidden="true">#</a> 通过 Prop 向子组件传递数据</h3><h3 id="监听子组件事件" tabindex="-1"><a class="header-anchor" href="#监听子组件事件" aria-hidden="true">#</a> 监听子组件事件</h3><p>父级组件可以像处理原生 DOM 事件一样通过 v-on 或 @ 监听子组件实例的任意事件</p><h3 id="使用事件抛出一个值" tabindex="-1"><a class="header-anchor" href="#使用事件抛出一个值" aria-hidden="true">#</a> 使用事件抛出一个值</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>@click<span class="token operator">=</span><span class="token string">&quot;$emit(&#39;enlargeText&#39;, 0.1)&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="在组件上使用-v-model" tabindex="-1"><a class="header-anchor" href="#在组件上使用-v-model" aria-hidden="true">#</a> 在组件上使用 v-model</h3><h3 id="通过插槽分发内容" tabindex="-1"><a class="header-anchor" href="#通过插槽分发内容" aria-hidden="true">#</a> 通过插槽分发内容</h3><h3 id="动态组件" tabindex="-1"><a class="header-anchor" href="#动态组件" aria-hidden="true">#</a> 动态组件</h3><p>在不同组件之间进行动态切换是非常有用的</p><h3 id="解析-dom-模板时的注意事项" tabindex="-1"><a class="header-anchor" href="#解析-dom-模板时的注意事项" aria-hidden="true">#</a> 解析 DOM 模板时的注意事项</h3><p>诸如 li、tr 和 option，只能出现在其它某些特定的元素内部 可以使用特殊的 v-is 指令作为一个变通的办法</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>blog-post-row<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="组件注册" tabindex="-1"><a class="header-anchor" href="#组件注册" aria-hidden="true">#</a> 组件注册</h2><h3 id="全局注册" tabindex="-1"><a class="header-anchor" href="#全局注册" aria-hidden="true">#</a> 全局注册</h3><h3 id="局部注册" tabindex="-1"><a class="header-anchor" href="#局部注册" aria-hidden="true">#</a> 局部注册</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;component-a&#39;</span><span class="token operator">:</span> ComponentA<span class="token punctuation">,</span>\n    <span class="token string">&#39;component-b&#39;</span><span class="token operator">:</span> ComponentB\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="模块系统" tabindex="-1"><a class="header-anchor" href="#模块系统" aria-hidden="true">#</a> 模块系统</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./ComponentA&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2><h3 id="prop类型" tabindex="-1"><a class="header-anchor" href="#prop类型" aria-hidden="true">#</a> Prop类型</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>props<span class="token operator">:</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> String<span class="token punctuation">,</span>\n  likes<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n  isPublished<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>\n  commentIds<span class="token operator">:</span> Array<span class="token punctuation">,</span>\n  author<span class="token operator">:</span> Object<span class="token punctuation">,</span>\n  callback<span class="token operator">:</span> Function<span class="token punctuation">,</span>\n  contactsPromise<span class="token operator">:</span> Promise <span class="token comment">// 或任何其他构造函数</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="单项数据流" tabindex="-1"><a class="header-anchor" href="#单项数据流" aria-hidden="true">#</a> 单项数据流</h3><p>父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解</p><h3 id="prop验证" tabindex="-1"><a class="header-anchor" href="#prop验证" aria-hidden="true">#</a> Prop验证</h3><h3 id="类型检查" tabindex="-1"><a class="header-anchor" href="#类型检查" aria-hidden="true">#</a> 类型检查</h3><p>type 可以是下列原生构造函数中的一个： String Number Boolean Array Object Date Function Symbol</p><h3 id="非-prop-的-attribute" tabindex="-1"><a class="header-anchor" href="#非-prop-的-attribute" aria-hidden="true">#</a> 非 Prop 的 Attribute</h3><p>常见的示例包括 class、style 和 id 属性</p><h3 id="禁用-attribute-继承" tabindex="-1"><a class="header-anchor" href="#禁用-attribute-继承" aria-hidden="true">#</a> 禁用 Attribute 继承</h3><p>不希望组件的根元素继承 attribute，你可以在组件的选项中设置 inheritAttrs: false $attrs 包含父组件传递到子组件的非Prop属性</p><h3 id="多个根节点上的-attribute-继承" tabindex="-1"><a class="header-anchor" href="#多个根节点上的-attribute-继承" aria-hidden="true">#</a> 多个根节点上的 Attribute 继承</h3><p>多个根节点的组件不具有自动 attribute 回退行为。如果未显式绑定 $attrs，将发出运行时警告</p><h2 id="自定义事件" tabindex="-1"><a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a> 自定义事件</h2><p>可以通过 emits 选项在组件上定义已发出的事件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;custom-form&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;inFocus&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;submit&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="验证抛出的事件" tabindex="-1"><a class="header-anchor" href="#验证抛出的事件" aria-hidden="true">#</a> 验证抛出的事件</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;custom-form&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  emits<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 没有验证</span>\n    click<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// 验证submit 事件</span>\n    <span class="token function-variable function">submit</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>email <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid submit event payload!&#39;</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="多个-v-model-绑定" tabindex="-1"><a class="header-anchor" href="#多个-v-model-绑定" aria-hidden="true">#</a> 多个 v-model 绑定</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user-name</span>\n  <span class="token attr-name"><span class="token namespace">v-model:</span>first-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>firstName<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">v-model:</span>last-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lastName<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user-name</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;user-name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span>\n    firstName<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    lastName<span class="token operator">:</span> String\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;update:firstName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update:lastName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;input \n      type=&quot;text&quot;\n      :value=&quot;firstName&quot;\n      @input=&quot;$emit(&#39;update:firstName&#39;, $event.target.value)&quot;&gt;\n\n    &lt;input\n      type=&quot;text&quot;\n      :value=&quot;lastName&quot;\n      @input=&quot;$emit(&#39;update:lastName&#39;, $event.target.value)&quot;&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="插槽" tabindex="-1"><a class="header-anchor" href="#插槽" aria-hidden="true">#</a> 插槽</h2><p>设计灵感源自 Web Components 规范草案</p><h3 id="插槽内容" tabindex="-1"><a class="header-anchor" href="#插槽内容" aria-hidden="true">#</a> 插槽内容</h3><h3 id="渲染作用域" tabindex="-1"><a class="header-anchor" href="#渲染作用域" aria-hidden="true">#</a> 渲染作用域</h3><p>可以访问与模板其余部分相同的实例property</p><h3 id="备用内容" tabindex="-1"><a class="header-anchor" href="#备用内容" aria-hidden="true">#</a> 备用内容</h3><h3 id="具名插槽" tabindex="-1"><a class="header-anchor" href="#具名插槽" aria-hidden="true">#</a> 具名插槽</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>div class=&quot;container&quot;&gt;\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 我们希望把页头放这里 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 我们希望把主要内容放这里 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 我们希望把页脚放这里 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- 使用 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Here&#39;s some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="作用域插槽" tabindex="-1"><a class="header-anchor" href="#作用域插槽" aria-hidden="true">#</a> 作用域插槽</h3><p>让插槽内容能够访问子组件中才有的数据是很有用的 绑定在 &lt;slot&gt; 元素上的 attribute 被称为插槽 prop 在父级作用域中，我们可以使用带值的 v-slot 来定义我们提供的插槽 prop 的名字</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slotProps<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fas fa-check<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>green<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ slotProps.item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-list</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="独占默认插槽的缩写语法" tabindex="-1"><a class="header-anchor" href="#独占默认插槽的缩写语法" aria-hidden="true">#</a> 独占默认插槽的缩写语法</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slotProps<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fas fa-check<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>green<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ slotProps.item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-list</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>插槽的缩写语法不能和具名插槽混用</p><h3 id="解构插槽-prop" tabindex="-1"><a class="header-anchor" href="#解构插槽-prop" aria-hidden="true">#</a> 解构插槽 Prop</h3><p>可以使用 ES2015 解构来传入具体的插槽 prop</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ item }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fas fa-check<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>green<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-list</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="动态插槽名" tabindex="-1"><a class="header-anchor" href="#动态插槽名" aria-hidden="true">#</a> 动态插槽名</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>[dynamicSlotName]</span><span class="token punctuation">&gt;</span></span>\n    ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="具名插槽的缩写" tabindex="-1"><a class="header-anchor" href="#具名插槽的缩写" aria-hidden="true">#</a> 具名插槽的缩写</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#footer</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Here&#39;s some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="provide-inject" tabindex="-1"><a class="header-anchor" href="#provide-inject" aria-hidden="true">#</a> Provide/Inject</h2><p>无论组件层次结构有多深，父组件都可以作为其所有子组件的依赖提供者</p><h3 id="处理响应性" tabindex="-1"><a class="header-anchor" href="#处理响应性" aria-hidden="true">#</a> 处理响应性</h3><p>如果我们想对祖先组件中的更改做出响应，我们需要为 provide 的 todoLength 分配一个组合式 API computed property</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;todo-list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      todoLength<span class="token operator">:</span> Vue<span class="token punctuation">.</span><span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;todo-list-statistics&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  inject<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;todoLength&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Injected property: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>todoLength<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// &gt; Injected property: 5</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="动态组件-异步组件" tabindex="-1"><a class="header-anchor" href="#动态组件-异步组件" aria-hidden="true">#</a> 动态组件&amp;异步组件</h2><h3 id="在动态组件上使用-keep-alive" tabindex="-1"><a class="header-anchor" href="#在动态组件上使用-keep-alive" aria-hidden="true">#</a> 在动态组件上使用 keep-alive</h3><p>组件之间切换的时候，保持这些组件的状态，以避免反复渲染导致的性能问题</p><h3 id="异步组件" tabindex="-1"><a class="header-anchor" href="#异步组件" aria-hidden="true">#</a> 异步组件</h3><p>Vue 有一个 defineAsyncComponent 方法，可以接受一个返回 Promise 的工厂函数</p><h2 id="模板引用" tabindex="-1"><a class="header-anchor" href="#模板引用" aria-hidden="true">#</a> 模板引用</h2><p>可以使用 ref attribute 为子组件或 HTML 元素指定引用 ID 还可以向组件本身添加另一个 ref</p><h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> Setup</h2><p>接受两个参数 props context: 暴露组件的三个property attrs slots emit</p><h3 id="访问组件的-property" tabindex="-1"><a class="header-anchor" href="#访问组件的-property" aria-hidden="true">#</a> 访问组件的 property</h3><p>执行 setup 时，组件实例尚未被创建。因此，你只能访问以下 property props attrs slots emit</p><h3 id="合模板使用" tabindex="-1"><a class="header-anchor" href="#合模板使用" aria-hidden="true">#</a> 合模板使用</h3><p>如果 setup 返回一个对象，则可以访问该对象的 property</p><h3 id="使用渲染函数" tabindex="-1"><a class="header-anchor" href="#使用渲染函数" aria-hidden="true">#</a> 使用渲染函数</h3><p>setup 还可以返回一个渲染函数，该函数可以直接使用在同一作用域中声明的响应式状态</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> readersNumber <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Vue 3 Guide&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>readersNumber<span class="token punctuation">.</span>value<span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="使用this" tabindex="-1"><a class="header-anchor" href="#使用this" aria-hidden="true">#</a> 使用this</h3><p>在 setup() 内部，this 不会是该活跃实例的引用</p><h2 id="provide-inject-1" tabindex="-1"><a class="header-anchor" href="#provide-inject-1" aria-hidden="true">#</a> Provide/Inject</h2><h3 id="使用-provide" tabindex="-1"><a class="header-anchor" href="#使用-provide" aria-hidden="true">#</a> 使用 Provide</h3><p>provide 函数允许你通过两个参数定义 property 首先从 vue 显式导入 provide 方法 property 的 name (String 类型) property 的 value</p><h3 id="使用-inject" tabindex="-1"><a class="header-anchor" href="#使用-inject" aria-hidden="true">#</a> 使用 inject</h3><p>首先从 vue 显式导入 inject 方法 inject 函数有两个参数 要 inject 的 property 的名称 一个默认的值 (可选)</p><h3 id="添加响应性" tabindex="-1"><a class="header-anchor" href="#添加响应性" aria-hidden="true">#</a> 添加响应性</h3><p>为了增加 provide 值和 inject 值之间的响应性，我们可以在 provide 值时使用 ref 或 reactive</p><h3 id="修改响应式-property" tabindex="-1"><a class="header-anchor" href="#修改响应式-property" aria-hidden="true">#</a> 修改响应式 property</h3><p>建议尽可能，在提供者内保持响应式 property 的任何更改</p><h2 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h2><h3 id="钩子函数" tabindex="-1"><a class="header-anchor" href="#钩子函数" aria-hidden="true">#</a> 钩子函数</h3><p>created beforeMount mounted beforeUpdate updated beforeUnmount unmounted</p><h3 id="动态指令参数" tabindex="-1"><a class="header-anchor" href="#动态指令参数" aria-hidden="true">#</a> 动态指令参数</h3><p>v-mydirective:[argument]=&quot;value&quot;</p><h3 id="函数简写" tabindex="-1"><a class="header-anchor" href="#函数简写" aria-hidden="true">#</a> 函数简写</h3><h3 id="对象字面量" tabindex="-1"><a class="header-anchor" href="#对象字面量" aria-hidden="true">#</a> 对象字面量</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-demo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ color: <span class="token punctuation">&#39;</span>white<span class="token punctuation">&#39;</span>, text: <span class="token punctuation">&#39;</span>hello!<span class="token punctuation">&#39;</span> }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token comment">// =&gt; &quot;white&quot;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">// =&gt; &quot;hello!&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="渲染函数" tabindex="-1"><a class="header-anchor" href="#渲染函数" aria-hidden="true">#</a> 渲染函数</h2>',122),h={},b=(0,s(3744).Z)(h,[["render",function(a,n){return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,(0,e.zw)()+" 双大括号的文本插值",1),l,(0,t._)("p",null,[c,(0,t._)("a",{href:a.url}," ... ",8,o),i,(0,t._)("a",{onClick:n[0]||(n[0]=(...n)=>a.doSomething&&a.doSomething(...n))}," ... ")]),u,(0,t._)("p",null,[(0,t._)("a",{onClickOnce:n[1]||(n[1]=(...n)=>a.doThis&&a.doThis(...n))},null,32),r]),(0,t._)("div",{onClickCapture:n[2]||(n[2]=(...n)=>a.doThis&&a.doThis(...n))},"...",32),d,(0,t._)("div",{onScrollPassive:n[3]||(n[3]=(...n)=>a.onScroll&&a.onScroll(...n))},"...",32),k],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,t]of n)a[s]=t;return a}}}]);