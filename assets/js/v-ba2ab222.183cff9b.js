"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[7309],{5797:(e,a,r)=>{r.r(a),r.d(a,{data:()=>t});const t={key:"v-ba2ab222",path:"/vue/SourceCode.html",title:"Vue Source Code",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"事件循环 EventLoop",slug:"事件循环-eventloop",children:[]},{level:2,title:"宏任务Task",slug:"宏任务task",children:[]},{level:2,title:"微任务",slug:"微任务",children:[]}],filePathRelative:"vue/SourceCode.md",git:{updatedTime:1635519893e3,contributors:[{name:"徐誉雄",email:"xuyuxiong@shinemo.com",commits:1}]}}},8320:(e,a,r)=>{r.r(a),r.d(a,{default:()=>d});const t=(0,r(6252).uE)('<h1 id="vue-source-code" tabindex="-1"><a class="header-anchor" href="#vue-source-code" aria-hidden="true">#</a> Vue Source Code</h1><h2 id="事件循环-eventloop" tabindex="-1"><a class="header-anchor" href="#事件循环-eventloop" aria-hidden="true">#</a> 事件循环 EventLoop</h2><p>浏览器为了协调事件处理、脚本执行、网络请求和渲染等任务而制定的工作机制。</p><h2 id="宏任务task" tabindex="-1"><a class="header-anchor" href="#宏任务task" aria-hidden="true">#</a> 宏任务Task</h2><p>代表一个个离散的、独立的工作单位。浏览器完成一个宏任务，在下一个宏任务执行开始前，会对页面进行重新渲染。主要包括创建文档对象、解析HTML、执行主线JS代码以及各种事件。如页面加载、输入、网络事件和定时器等。</p><h2 id="微任务" tabindex="-1"><a class="header-anchor" href="#微任务" aria-hidden="true">#</a> 微任务</h2><p>微任务是更小的任务，在当前宏任务执行结束后立即执行的任务。如果存在微任务，浏览器会清空微任务队列之后再重新渲染。微任务的例子有Promise回调哈桑农户、DOM变化等。</p>',7),o={},d=(0,r(3744).Z)(o,[["render",function(e,a){return t}]])},3744:(e,a)=>{a.Z=(e,a)=>{for(const[r,t]of a)e[r]=t;return e}}}]);