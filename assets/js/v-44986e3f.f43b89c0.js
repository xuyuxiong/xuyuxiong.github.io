"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[8235],{6242:(e,i,l)=>{l.r(i),l.d(i,{data:()=>a});const a={key:"v-44986e3f",path:"/interview/interview.html",title:"面试知识点",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"预编译",slug:"预编译",children:[]},{level:2,title:"作用域 [[scope]]",slug:"作用域-scope",children:[]},{level:2,title:"作用域链",slug:"作用域链",children:[]},{level:2,title:"闭包",slug:"闭包",children:[]},{level:2,title:"typeof运算符",slug:"typeof运算符",children:[]},{level:2,title:"变量计算 - 强制类型转换",slug:"变量计算-强制类型转换",children:[]},{level:2,title:"CSS",slug:"css",children:[]},{level:2,title:"ES6",slug:"es6",children:[]},{level:2,title:"异步",slug:"异步",children:[]},{level:2,title:"原型",slug:"原型",children:[]},{level:2,title:"vdom",slug:"vdom",children:[]},{level:2,title:"MVVM",slug:"mvvm",children:[]},{level:2,title:"组件化",slug:"组件化",children:[]},{level:2,title:"hybrid",slug:"hybrid",children:[]}],filePathRelative:"interview/interview.md",git:{updatedTime:1635519893e3,contributors:[{name:"徐誉雄",email:"xuyuxiong@shinemo.com",commits:1}]}}},8066:(e,i,l)=>{l.r(i),l.d(i,{default:()=>t});const a=(0,l(6252).uE)('<h1 id="面试知识点" tabindex="-1"><a class="header-anchor" href="#面试知识点" aria-hidden="true">#</a> 面试知识点</h1><h2 id="预编译" tabindex="-1"><a class="header-anchor" href="#预编译" aria-hidden="true">#</a> 预编译</h2><p>发生在函数执行前一刻 解决执行顺序的问题 导致函数声明提升 变量声明提升</p><ol><li>创建AO(Activation Object)对象 (执行期上下文)</li><li>找形参和变量声明，将变量声明和形参作为AO对象的属性名，值为undefined</li><li>将实参值和形参统一</li><li>在函数体里面找函数声明，值赋予函数体</li></ol><h2 id="作用域-scope" tabindex="-1"><a class="header-anchor" href="#作用域-scope" aria-hidden="true">#</a> 作用域 [[scope]]</h2><p>每个函数都是一个对象 对象上有些属性仅供引擎存取 [[scope]]就是我们所说的作用域，其中存储了运行期上下文 作用域就是代码的执行环境，全局执行环境就是全局作用域，函数的执行环境就是私有作用域，它们都是栈内存。</p><h2 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链" aria-hidden="true">#</a> 作用域链</h2><p>作用域呈链式连接 函数被定义时产生GO 函数执行时产生AO并放到GO的前面 当代码在一个环境中执行时，会创建变量对象的一个作用域链 内部环境可以通过作用域链访问所有外部环境，但外部环境不能访问内部环境的任何变量和函数。</p><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>当内部函数被保存到外部时,将会生成闭包。闭包会导致原有作用域链不释放，造成内存泄漏</p><h4 id="闭包的底层原理" tabindex="-1"><a class="header-anchor" href="#闭包的底层原理" aria-hidden="true">#</a> 闭包的底层原理</h4><p>代码的编译和执行是通过v8引擎在执行上下文中完成的</p><ul><li>执行上下文(一共3种)</li></ul><ol><li>全局执行上下文</li><li>函数执行上下文</li><li>eval执行上下文</li></ol><ul><li>执行上下文分为两个阶段 <ul><li>创建阶段 创建词法环境 生产变量对象(VO),建立作用域链 确认this指向 绑定this</li><li>执行阶段 变量赋值-&gt;函数引用-&gt;执行其他代码-&gt;执行完毕后出栈等待被回收 变量对象变为活动对象 该阶段会进行变量赋值，函数引用并执行其他代码</li></ul></li></ul><p>什么是变量对象 js引擎在内存中建立的对象，用来存放当前执行环境的变量</p><ul><li>变量对象的创建分为三个过程</li></ul><ol><li>创建arguments对象（根据实参和形参放入arguments对象中）</li><li>当遇到同名的函数时，后面的会覆盖前面的</li><li>检查当前环境的变量声明并赋值为undefined</li></ol><p>什么是词法作用域？ 如果在函数执行上下文中找不到变量，它将在调用上下文中寻找它，如果在它的调用上下文中没有找到，就一直往上一级，直到它在全局执行上下文中查找为止</p><h2 id="typeof运算符" tabindex="-1"><a class="header-anchor" href="#typeof运算符" aria-hidden="true">#</a> typeof运算符</h2><p>typeof undefined // undefined typeof &#39;abc&#39; // string typeof 123 // number typeof true // boolean typeof {} // object typeof [] // object typeof null // object typeof console.log // function</p><h2 id="变量计算-强制类型转换" tabindex="-1"><a class="header-anchor" href="#变量计算-强制类型转换" aria-hidden="true">#</a> 变量计算 - 强制类型转换</h2><ul><li>字符串拼接 var b = a + &#39;11&#39;</li><li>== 运算符 null == undefined // true</li><li>逻辑运算符 console.log(10 &amp; 0) // 0</li></ul><h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><ul><li>CSS样式优先级 权重的计算</li><li>雪碧图的作用 减少HTTP的请求 某些情况下可以减小图片大小</li><li>自定义字体的使用场景 宣传/品牌/banner等固定文案 字体图标</li><li>伪类和伪元素的区别 伪类表示状态(:active :focus :link :hover :visited) 伪元素是真的有元素(::first-letter ::first-line ::before ::after)</li><li>如何美化checkbox label[for]和id 隐藏元素input :checked + label</li><li>实现两栏(三栏)布局的方法 1.表格布局 2.float + margin布局 3.inline-block布局 4.flexbox布局</li><li>display:inline-block的间距 原因: 字符间距 解决: 消灭字符或消灭间距 如何适配移动端页面 首先要设置viewport rem/viewport/media query 设计上: 隐藏 折行 自适应</li><li>动画有几种 过渡动画 transition 关键帧动画 animation</li><li>过渡动画和关键帧动画的区别 过渡动画需要有状态变化 关键帧动画不需要状态变化 关键帧动画能控制更精细</li><li>预处理器的作用 更好的组织CSS代码 提高代码复用率 提升可维护性</li><li>PostCSS 本身只有解析CSS文件的能力,必须依靠插件 import 模块合并 autoprefixier 自动加前缀 cssnano 压缩代码 cssnext 使用CSS新特性 precss 变量 mixin 循环等</li></ul><h2 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> ES6</h2><ul><li>模块化的使用和编译环境</li><li>class与构造函数的区别</li><li>Promise的用法</li><li>ES6其他常用功能</li></ul><h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h2><ul><li>什么是单线程,和异步有何关系</li><li>什么是event-loop</li><li>目前JS解决异步的方案有哪些</li><li>Promise的标准</li><li>async/await的使用</li></ul><h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h2><ul><li>原型如何实际应用</li><li>原型如何满足拓展</li></ul><h2 id="vdom" tabindex="-1"><a class="header-anchor" href="#vdom" aria-hidden="true">#</a> vdom</h2><ul><li>什么是vdom 为何要用vdom</li><li>vdom如何使用 核心函数有哪些</li><li>了解diff算法吗</li></ul><h2 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm" aria-hidden="true">#</a> MVVM</h2><ul><li>如何理解MVVM</li><li>vue如何实现响应式</li><li>vue如何解析模板</li><li>介绍vue的实现流程</li></ul><h2 id="组件化" tabindex="-1"><a class="header-anchor" href="#组件化" aria-hidden="true">#</a> 组件化</h2><ul><li>对组件化的理解</li><li>jSX是什么</li><li>jsx和vdom什么关系</li><li>简述React的setState</li><li>阐述自己如何比较React和vue</li></ul><h2 id="hybrid" tabindex="-1"><a class="header-anchor" href="#hybrid" aria-hidden="true">#</a> hybrid</h2><ul><li>hybrid是什么 为什么要用hybrid</li><li>hybrid如何更新上线</li><li>hybrid和h5有何区别</li><li>JS如何与客户端通信</li></ul>',39),r={},t=(0,l(3744).Z)(r,[["render",function(e,i){return a}]])},3744:(e,i)=>{i.Z=(e,i)=>{for(const[l,a]of i)e[l]=a;return e}}}]);