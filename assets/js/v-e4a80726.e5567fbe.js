"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[7013],{9590:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-e4a80726",path:"/frontend/Other.html",title:"前端知识点",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"利用ajax来解决验证用户名问题",slug:"利用ajax来解决验证用户名问题",children:[]},{level:2,title:"针对ajax的详细解释",slug:"针对ajax的详细解释",children:[]},{level:2,title:"onreadystatechange",slug:"onreadystatechange",children:[]},{level:2,title:"利用FormData来实现文件上传",slug:"利用formdata来实现文件上传",children:[]}],filePathRelative:"frontend/Other.md",git:{updatedTime:1635519893e3,contributors:[{name:"徐誉雄",email:"xuyuxiong@shinemo.com",commits:1}]}}},3160:(a,n,s)=>{s.r(n),s.d(n,{default:()=>p});const t=(0,s(6252).uE)('<h1 id="前端知识点" tabindex="-1"><a class="header-anchor" href="#前端知识点" aria-hidden="true">#</a> 前端知识点</h1><h2 id="利用ajax来解决验证用户名问题" tabindex="-1"><a class="header-anchor" href="#利用ajax来解决验证用户名问题" aria-hidden="true">#</a> 利用ajax来解决验证用户名问题</h2><ul><li><p>ajax是： <em>Ajax</em> 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML）</p></li><li><p>ajax的基本使用；</p><ul><li><p>新建XMLHttpRequest对象；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>配置请求参数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/checkUser&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true是异步，false是同步</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>接收返还值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>发送服务器</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>xhr.send();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul></li></ul><h2 id="针对ajax的详细解释" tabindex="-1"><a class="header-anchor" href="#针对ajax的详细解释" aria-hidden="true">#</a> 针对ajax的详细解释</h2><ul><li><p>get注意点</p><ul><li>get通过parmas传参</li><li>get和querystring的问题,通过url传参</li></ul></li><li><p>post注意点</p><ul><li><p>发送数据时候需要设置http正文头格式；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//默认编码</span>\nxhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;multipart/form-data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//二进制编码</span>\nxhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//json编码</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>获取头部信息；</p><ul><li>getAllResponseHeaders 或者是getResponseHeader ；</li></ul></li></ul></li></ul><h2 id="onreadystatechange" tabindex="-1"><a class="header-anchor" href="#onreadystatechange" aria-hidden="true">#</a> onreadystatechange</h2><p>onreadystatechange：存有处理服务器响应的函数，每当 readyState 改变时，onreadystatechange 函数就会被执行。</p><p>readyState：存有服务器响应的状态信息。</p><ul><li>0: 请求未初始化（代理被创建，但尚未调用 open() 方法）</li><li>1: 服务器连接已建立（<code>open</code>方法已经被调用）</li><li>2: 请求已接收（<code>send</code>方法已经被调用，并且头部和状态已经可获得）</li><li>3: 请求处理中（下载中，<code>responseText</code> 属性已经包含部分数据）</li><li>4: 请求已完成，且响应已就绪（下载操作已完成）</li></ul><p>status常用状态码</p><table><tr><td>HTTP状态码</td><td>描述</td></tr><tr><td>100</td><td>继续。继续响应剩余部分，进行提交请求</td></tr><tr><td>200</td><td>成功</td></tr><tr><td>301</td><td>永久移动。请求资源永久移动到新位置</td></tr><tr><td>302</td><td>临时移动。请求资源零时移动到新位置</td></tr><tr><td>304</td><td>未修改。请求资源对比上次未被修改，响应中不包含资源内容</td></tr><tr><td>401</td><td>未授权，需要身份验证</td></tr><tr><td>403</td><td>禁止。请求被拒绝</td></tr><tr><td>404</td><td>未找到，服务器未找到需要资源</td></tr><tr><td>500</td><td>服务器内部错误。服务器遇到错误，无法完成请求</td></tr><tr><td>503</td><td>服务器不可用。临时服务过载，无法处理请求</td></tr></table><ul><li><p>返还数据类型</p><ul><li><p>服务器返还json数据</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span>responseText  <span class="token comment">//来获取</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>服务器返还xml数据</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span>responseXML <span class="token comment">//获取值</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>重写response里的content-type内容</li><li>xhr.overrideMimeType(&#39;text/xml; charset = utf-8&#39;)</li></ul></li></ul></li><li><p>同步及异步ajax；</p><ul><li>设置true和false区别；</li></ul></li></ul><h2 id="利用formdata来实现文件上传" tabindex="-1"><a class="header-anchor" href="#利用formdata来实现文件上传" aria-hidden="true">#</a> 利用FormData来实现文件上传</h2><ul><li><p>创建FormData对象</p></li><li><p>监控上传进度</p><p>upload 事件</p><ul><li>onloadstart 上传开始</li><li>onprogress 数据传输进行中 <ul><li>evt.total ：需要传输的总大小；</li><li>evt.loaded :当前上传的文件大小；</li></ul></li><li>onabort 上传操作终止</li><li>onerror 上传失败</li><li>onload 上传成功</li><li>onloadend 上传完成（不论成功与否）</li></ul></li></ul>',14),e={},p=(0,s(3744).Z)(e,[["render",function(a,n){return t}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,t]of n)a[s]=t;return a}}}]);