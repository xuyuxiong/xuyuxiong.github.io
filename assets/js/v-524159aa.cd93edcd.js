"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[1436],{7341:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-524159aa",path:"/blog/Cache.html",title:"node 实践浏览器缓存",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是浏览器缓存",slug:"什么是浏览器缓存",children:[{level:3,title:"优点",slug:"优点",children:[]},{level:3,title:"强缓存",slug:"强缓存",children:[]},{level:3,title:"协商缓存",slug:"协商缓存",children:[]},{level:3,title:"流程总结",slug:"流程总结",children:[]}]},{level:2,title:"node 实践",slug:"node-实践",children:[{level:3,title:"koa 启动服务",slug:"koa-启动服务",children:[]},{level:3,title:"原生 koa 实现简易静态资源服务",slug:"原生-koa-实现简易静态资源服务",children:[]},{level:3,title:"强缓存",slug:"强缓存-1",children:[]},{level:3,title:"协商缓存",slug:"协商缓存-1",children:[]},{level:3,title:"小结",slug:"小结",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]},{level:2,title:"写在最后",slug:"写在最后",children:[]}],filePathRelative:"blog/Cache.md",git:{updatedTime:1635519893e3,contributors:[{name:"徐誉雄",email:"xuyuxiong@shinemo.com",commits:1}]}}},1631:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var t=a(6252);const p=(0,t.uE)('<h1 id="node-实践浏览器缓存" tabindex="-1"><a class="header-anchor" href="#node-实践浏览器缓存" aria-hidden="true">#</a> node 实践浏览器缓存</h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f6f2572c5c44b67a824a2e209ca3662~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>浏览器缓存是性能优化非常重要的一个方案，合理地使用缓存可以提高用户体验，还能节省服务器的开销。掌握好缓存的原理和并合理地使用无论对前端还是运维都是相当重要的。</p><h2 id="什么是浏览器缓存" tabindex="-1"><a class="header-anchor" href="#什么是浏览器缓存" aria-hidden="true">#</a> 什么是浏览器缓存</h2><p><code>浏览器缓存(http 缓存)</code> 是指浏览器在本地磁盘对用户最近请求过的文档进行存储，当访问者再次访问同一页面时，浏览器就可以直接从本地磁盘加载文档。</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ol><li><p>减少了冗余的数据传输，节省带宽，减少服务器压力</p></li><li><p>加快了客户端加载速度，提升用户体验。</p></li></ol><h3 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存" aria-hidden="true">#</a> 强缓存</h3><p>强缓存不会向服务器发送请求，而是直接从缓存中读取资源，强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control，这两个头部分别是 HTTP1.0 和 HTTP1.1 的实现。</p><h4 id="expires" tabindex="-1"><a class="header-anchor" href="#expires" aria-hidden="true">#</a> Expires</h4><p>Expires 是 HTTP1.0 提出的一个表示资源过期时间的 header，它描述的是一个绝对时间，由服务器返回。 Expires 受限于本地时间，如果修改了本地时间，就会造成缓存失效。</p><h4 id="cache-control" tabindex="-1"><a class="header-anchor" href="#cache-control" aria-hidden="true">#</a> Cache-Control</h4><p>Cache-Control 出现于 HTTP/1.1，常见字段是 max-age，单位是秒，很多 web 服务器都有默认配置，优先级高于 Expires，表示的是相对时间。</p><p>例如 Cache-Control:max-age=3600 代表资源的有效期是 3600 秒。取的是响应头中的 Date，请求发送的时间，表示当前资源在 Date ~ Date +3600s 这段时间里都是有效的。Cache-Control 还拥有多个值：</p><ul><li>no-cache 不直接使用缓存，也就是跳过强缓存。</li><li>no-store 禁止浏览器缓存数据，每次请求资源都会向服务器要完整的资源。</li><li>public 可以被所有用户缓存，包括终端用户和 CDN 等中间件代理服务器。</li><li>private 只允许终端用户的浏览器缓存，不允许其他中间代理服务器缓存。</li></ul><p><code>要注意的就是no-cache和no-store的区别，no-cache是跳过强缓存，还是会走协商缓存的步骤，而no-store是真正的完全不走缓存，所有资源都不会缓存在本地</code></p><h3 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h3><p>当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的 http 状态为 304 并且会显示一个 Not Modified 的字符串。</p><p>协商缓存用的是【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对 Header 来管理的。</p><p><code>注意！！协商缓存需要配合强缓存使用，使用协商缓存需要先设置Cache-Control：no-cache或者pragma：no-cache来告诉浏览器不走强缓存</code></p><h4 id="last-modified、if-modified-since" tabindex="-1"><a class="header-anchor" href="#last-modified、if-modified-since" aria-hidden="true">#</a> Last-Modified、If-Modified-Since</h4><p>这两个 Header 是 HTTP1.0 版本提出来的，两个字段配合使用。</p><p>Last-Modified 表示本地文件最后修改日期，浏览器会在请求头带上 If-Modified-Since（上次返回的 Last-Modified 的值），服务器会将这个值与资源修改的时间匹配，如果时间不一致，服务器会返回新的资源，并且将 Last-Modified 值更新，作为响应头返回给浏览器。如果时间一致，表示资源没有更新，服务器返回 304 状态码，浏览器拿到响应状态码后从本地缓存中读取资源。</p><p>但 Last-Modified 有几个问题。</p><ul><li>文件虽然被修改了，但最终的内容没有变化，这样文件修改时间还是会被更新</li><li>有的文件修改频率在秒以内，这时候以秒粒度来记录就不够了</li><li>有的服务器无法精确获取文件的最后修改时间。</li></ul><p>所以出现了 ETAG。</p><h4 id="etag、if-none-match" tabindex="-1"><a class="header-anchor" href="#etag、if-none-match" aria-hidden="true">#</a> ETag、If-None-Match</h4><p>在 HTTP1.1 版本中，服务器通过 Etag 来设置响应头缓存标识。Etag 的值由服务端生成。在第一次请求时，服务器会将资源和 Etag 一并返回给浏览器，浏览器将两者缓存到本地缓存数据库。在第二次请求时，浏览器会将 Etag 信息放到 If-None-Match 请求头去访问服务器，服务器收到请求后，会将服务器中的文件标识与浏览器发来的标识进行对比，如果不相同，服务器返回更新的资源和新的 Etag ，如果相同，服务器返回 304 状态码，浏览器读取缓存。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffc78ee5fd654037aa383500550c81d6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="流程总结" tabindex="-1"><a class="header-anchor" href="#流程总结" aria-hidden="true">#</a> 流程总结</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ff3c19866aa4db1aa62f462963bcdfa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>总结这几个字段：</p><ul><li>Cache-Control —— 请求服务器之前</li><li>Expires —— 请求服务器之前</li><li>If-None-Match (Etag) —— 请求服务器</li><li>If-Modified-Since (Last-Modified) —— 请求服务器</li></ul><h2 id="node-实践" tabindex="-1"><a class="header-anchor" href="#node-实践" aria-hidden="true">#</a> node 实践</h2><p>本文用 koa 来做例子，因为 koa 是更轻量级的、更纯净的，本身并没有捆绑任何中间件，相比 express 自带了很多 router、static 等多种中间件函数，koa 更适合本文来做示例。</p><h3 id="koa-启动服务" tabindex="-1"><a class="header-anchor" href="#koa-启动服务" aria-hidden="true">#</a> koa 启动服务</h3><p>秉着学习和更容易理解的宗旨，不使用 koa-static 和 koa-router 中间件，用 koa 简易实现 web 服务器来验证之前的结论。</p><ol><li>创建项目</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 创建并进入一个目录并新建index.js文件</span>\n<span class="token function">mkdir</span> koa-cache\n<span class="token builtin class-name">cd</span> koa-cache\n<span class="token function">touch</span> index.js\n\n<span class="token comment"># 初始化项目</span>\n<span class="token function">git</span> init\n<span class="token function">yarn</span> init\n\n<span class="token comment"># 将 koa 安装为本地依赖</span>\n<span class="token function">yarn</span> <span class="token function">add</span> koa\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li>koa 代码</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/*app.js*/</span>\n<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&quot;hello koa&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;starting at port 3000&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="3"><li>启动服务</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>node index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样一个 koa 服务就起来了，访问 localhost:3000 可以就看到 hello koa。</p><p>为了方便调试，修改代码不用重新启动，推荐使用 nodemon 或者 pm2 启动服务。</p><h3 id="原生-koa-实现简易静态资源服务" tabindex="-1"><a class="header-anchor" href="#原生-koa-实现简易静态资源服务" aria-hidden="true">#</a> 原生 koa 实现简易静态资源服务</h3><p>实现一个静态资源服务器关键点就是根据前端请求的地址来判断请求的资源类型，设置返回的 Content-Type，让浏览器知道返回的内容类型，浏览器才能决定以什么形式，什么编码来读取返回的内容。</p><h4 id="定义资源类型列表" tabindex="-1"><a class="header-anchor" href="#定义资源类型列表" aria-hidden="true">#</a> 定义资源类型列表</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> mimes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  css<span class="token operator">:</span> <span class="token string">&quot;text/css&quot;</span><span class="token punctuation">,</span>\n  less<span class="token operator">:</span> <span class="token string">&quot;text/css&quot;</span><span class="token punctuation">,</span>\n  gif<span class="token operator">:</span> <span class="token string">&quot;image/gif&quot;</span><span class="token punctuation">,</span>\n  html<span class="token operator">:</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">,</span>\n  ico<span class="token operator">:</span> <span class="token string">&quot;image/x-icon&quot;</span><span class="token punctuation">,</span>\n  jpeg<span class="token operator">:</span> <span class="token string">&quot;image/jpeg&quot;</span><span class="token punctuation">,</span>\n  jpg<span class="token operator">:</span> <span class="token string">&quot;image/jpeg&quot;</span><span class="token punctuation">,</span>\n  js<span class="token operator">:</span> <span class="token string">&quot;text/javascript&quot;</span><span class="token punctuation">,</span>\n  json<span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>\n  pdf<span class="token operator">:</span> <span class="token string">&quot;application/pdf&quot;</span><span class="token punctuation">,</span>\n  png<span class="token operator">:</span> <span class="token string">&quot;image/png&quot;</span><span class="token punctuation">,</span>\n  svg<span class="token operator">:</span> <span class="token string">&quot;image/svg+xml&quot;</span><span class="token punctuation">,</span>\n  swf<span class="token operator">:</span> <span class="token string">&quot;application/x-shockwave-flash&quot;</span><span class="token punctuation">,</span>\n  tiff<span class="token operator">:</span> <span class="token string">&quot;image/tiff&quot;</span><span class="token punctuation">,</span>\n  txt<span class="token operator">:</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span>\n  wav<span class="token operator">:</span> <span class="token string">&quot;audio/x-wav&quot;</span><span class="token punctuation">,</span>\n  wma<span class="token operator">:</span> <span class="token string">&quot;audio/x-ms-wma&quot;</span><span class="token punctuation">,</span>\n  wmv<span class="token operator">:</span> <span class="token string">&quot;video/x-ms-wmv&quot;</span><span class="token punctuation">,</span>\n  xml<span class="token operator">:</span> <span class="token string">&quot;text/xml&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="解析请求的资源类型" tabindex="-1"><a class="header-anchor" href="#解析请求的资源类型" aria-hidden="true">#</a> 解析请求的资源类型</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseMime</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// path.extname获取路径中文件的后缀名</span>\n  <span class="token keyword">let</span> extName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n  extName <span class="token operator">=</span> extName <span class="token operator">?</span> extName<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;unknown&quot;</span>\n  <span class="token keyword">return</span> mimes<span class="token punctuation">[</span>extName<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="fs-读取文件" tabindex="-1"><a class="header-anchor" href="#fs-读取文件" aria-hidden="true">#</a> fs 读取文件</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">parseStatic</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;binary&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="koa-处理" tabindex="-1"><a class="header-anchor" href="#koa-处理" aria-hidden="true">#</a> koa 处理</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 访问根路径返回index.html</span>\n    ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseStatic</span><span class="token punctuation">(</span><span class="token string">&quot;./index.html&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token function">parseMime</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseStatic</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这样基本也就完成了一个简单的静态资源服务器。然后在根目录下新建一个 html 文件和 static 目录，并在 static 下放一些文件。这时候的目录应该是这样的：</p><pre><code>|-- koa-cache\n    |-- index.html\n    |-- index.js\n    |-- static\n        |-- css\n            |-- color.css\n            |-- ...\n        |-- image\n            |-- soldier.png\n            |-- ...\n        ...\n   ...\n</code></pre><p>这时候就可以通过 localhost:3000/static 访问具体的资源文件了。</p><h5 id="index-html" tabindex="-1"><a class="header-anchor" href="#index-html" aria-hidden="true">#</a> index.html</h5><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>test cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/static/css/index.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试css文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/static/image/soldier.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="css-color-css" tabindex="-1"><a class="header-anchor" href="#css-color-css" aria-hidden="true">#</a> css/color.css</h5><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">#app</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这时候打开 localhost:3000，就能看到如下效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1062e5185be94b329b9964296e8b128a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>到这里基本的环境就都搭好了。接下来进入验证阶段。</p><h3 id="强缓存-1" tabindex="-1"><a class="header-anchor" href="#强缓存-1" aria-hidden="true">#</a> 强缓存</h3><p>在没有任何配置之前，可以看下 network：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6110c99abd67492d9fe221d3190b0b04~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这时候无论是首次还是第几次，都会向服务器请求资源。</p><p><code>注意！！！在开始实验之前要把network面板的Disable cache勾选去掉，这个选项表示禁用浏览器缓存，浏览器请求会带上Cache-Control: no-cache和Pragma: no-cache头部信息，这时候所有的请求都不会走缓存</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88f2440ce3cd4026aea411914e8fc7a5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="设置-expire" tabindex="-1"><a class="header-anchor" href="#设置-expire" aria-hidden="true">#</a> 设置 Expire</h4><p>修改 index.js 中的 app.use 代码段。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 访问根路径返回index.html</span>\n    ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseStatic</span><span class="token punctuation">(</span><span class="token string">&quot;./index.html&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token function">parseMime</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// 设置过期时间在30000毫秒，也就是30秒后</span>\n    ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Expires&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseStatic</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>用 ctx.set(&#39;Expires&#39;, new Date(Date.now() + 30000))，设置过期时间为当期时间的 30000 毫秒，也就是 30 秒后<code>（后面的设置头部信息都是这里修改）</code>。</p><p>再访问下 localhost:3000，可以看到多了 Expires 这个 Header。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e1c6f69e6944c35a8427e774a60ddb1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>后面在 30 秒之内访问都可以看到 network 的 Size，css 文件显示的是 disk cache，而 image 资源显示的是 from memory cache。这时候浏览器是直接读的浏览器缓存，并没有请求服务器，可以尝试把 css 和图片文件改名称或者删除验证下，页面显示正常，说明之前的结论是没错的。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55201ba3536d4827ae846990170f63c8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="cache-control-1" tabindex="-1"><a class="header-anchor" href="#cache-control-1" aria-hidden="true">#</a> Cache-Control</h4><p>ctx.set(&#39;Cache-Control&#39;, &#39;max-age=300&#39;)设置 300 秒有效期，验证方式同上。</p><h3 id="协商缓存-1" tabindex="-1"><a class="header-anchor" href="#协商缓存-1" aria-hidden="true">#</a> 协商缓存</h3><h4 id="last-modified-if-modified-since" tabindex="-1"><a class="header-anchor" href="#last-modified-if-modified-since" aria-hidden="true">#</a> Last-Modified，If-Modified-Since</h4><p>HTTP1.0 协商缓存关键点就是根据客户端请求带的 ifModifiedSince 字段的时间和请求的资源对应的修改时间来判断资源是否有更新。</p><p>首先设置 Cache-Control： no-cache, 使客户端不走强缓存，再判断客户端请求是否有带 ifModifiedSince 字段，没有就设置 Last-Modified 字段，并返回资源文件。如果有就用 fs.stat 读取资源文件的修改时间，并进行对比，如果时间一样，则返回状态码 304。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Cache-Control&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;no-cache&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> ifModifiedSince <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">&quot;if-modified-since&quot;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> fileStat <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileStat</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>ifModifiedSince <span class="token operator">===</span> fileStat<span class="token punctuation">.</span>mtime<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">304</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Last-Modified&quot;</span><span class="token punctuation">,</span> fileStat<span class="token punctuation">.</span>mtime<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseStatic</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="etag、if-none-match-1" tabindex="-1"><a class="header-anchor" href="#etag、if-none-match-1" aria-hidden="true">#</a> etag、If-None-Match</h4>',87),e=(0,t.Uk)("etag 的关键点在于计算资源文件的唯一性，这里使用 nodejs 内置的 crypto 模块来计算文件的 hash 值，并用十六进制的字符串表示。cypto 的用法可以看 nodejs 的"),o={href:"http://nodejs.cn/api/crypto.html#crypto_crypto",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("官网"),l=(0,t.Uk)(" 。crpto 不仅支持字符串的加密，还支持传入 buffer 加密，作为 nodejs 的内置模块，在这里用来计算文件的唯一标识再合适不过。"),i=(0,t.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Cache-Control&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;no-cache&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fileBuffer <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseStatic</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>\n<span class="token keyword">const</span> ifNoneMatch <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;if-none-match&quot;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> hash <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&quot;md5&quot;</span><span class="token punctuation">)</span>\nhash<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>fileBuffer<span class="token punctuation">)</span>\n<span class="token keyword">const</span> etag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hash<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;hex&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>ifNoneMatch <span class="token operator">===</span> etag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">304</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;etag&quot;</span><span class="token punctuation">,</span> etag<span class="token punctuation">)</span>\n  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> fileBuffer\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>效果如下图，第二次请求浏览器会带上 If-None-Match，服务器计算文件的 hash 值再次比较，相同则返回 304，不同再返回新的文件。而如果修改了文件，文件的 hash 值也就变了，这时候两个 hash 不匹配，服务器则返回新的文件并带上新文件的 hash 值作为 etag。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cb65d3c284f4042ba65668399315a3c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>通过以上代码实践了每个缓存字段的效果，代码仅作为演示，生产的静态资源服务器会更加复杂，例如 etag 不会每次都重新获取文件来计算文件的 hash 值，这样太费性能，一般都会有响应的缓存机制，比如对资源的 last-modified 和 etag 值建立索引缓存。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通常 web 服务器都有默认的缓存配置，具体的实现可能也不大相同，像 nginx、tomcat、express 等 web 服务器都有相应的源码，有兴趣的可以去阅读学习。</p><p>合理的使用强缓存和协商缓存具体需要看项目的使用场景和需求。像目前常见的单页面应用，因为通常打包都是新生成 html 与相应的静态资源依赖，所以可以对 html 文件配置协商缓存，而打包生成的依赖，例如 js、css 这些文件可以使用强缓存。或者只对第三方库使用强缓存，因为第三方库通常版本更新较慢，可以锁定版本。</p><p>node 示例完整代码可以在这里看https://github.com/chen-junyi/code/blob/main/node/cache/koa2.js</p><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2><p>本人写作水平有限，有哪里说得不对和写错的欢迎指出来，有什么问题也欢迎在底下留言交流。</p><p><code>本人最近准备整理一个前端知识文档网站，有兴趣一起整理的可以留言，具体可以看下面的第一篇文章</code></p><p>往期文章</p>',13),u={href:"https://juejin.cn/post/6937532951223599141",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("用 GitHub Action + VuePress 自动化部署自己的文档网站"),k={href:"https://juejin.cn/post/6934539800527503368",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Uk)("vue 中的 nextTick 完整解析"),b={},m=(0,a(3744).Z)(b,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,(0,t._)("a",o,[c,(0,t.Wm)(a)]),l]),i,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",u,[r,(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t._)("a",k,[d,(0,t.Wm)(a)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);