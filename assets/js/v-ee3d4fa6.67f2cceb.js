"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[9615],{9524:(e,t,d)=>{d.r(t),d.d(t,{data:()=>a});const a={key:"v-ee3d4fa6",path:"/frontend/Http.html",title:"HTTP",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"HTTP",slug:"http-1",children:[{level:3,title:"header",slug:"header",children:[]}]},{level:2,title:"HTTPS",slug:"https",children:[{level:3,title:"HTTPS 和 HTTP 的区别",slug:"https-和-http-的区别",children:[]}]},{level:2,title:"HTTP2.0",slug:"http2-0",children:[{level:3,title:"二进制传输",slug:"二进制传输",children:[]},{level:3,title:"多路复用",slug:"多路复用",children:[]},{level:3,title:"Header 压缩",slug:"header-压缩",children:[]},{level:3,title:"服务端 Push",slug:"服务端-push",children:[]}]}],filePathRelative:"frontend/Http.md",git:{updatedTime:1635519893e3,contributors:[{name:"徐誉雄",email:"xuyuxiong@shinemo.com",commits:1}]}}},1849:(e,t,d)=>{d.r(t),d.d(t,{default:()=>T});const a=(0,d(6252).uE)('<h1 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h1><h2 id="http-1" tabindex="-1"><a class="header-anchor" href="#http-1" aria-hidden="true">#</a> HTTP</h2><p>HTTP 协议是个无状态协议，基于 TCP/IP 通信协议来传递数据.</p><p>HTTP 报文由 header 和 body 两部分组成。</p><p>HTTP 报文分为请求报文和响应报文</p><h3 id="header" tabindex="-1"><a class="header-anchor" href="#header" aria-hidden="true">#</a> header</h3><ul><li>起始行</li></ul><p>请求报文起始行由<code>请求方法 + 路径 + http版本</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>GET /home HTTP/1.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>响应报文起始行也叫状态行，由<code>http版本 + 状态码 + 描述</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>HTTP/1.1 200 OK\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>头部</li></ul><p>头部由一系列键值组成，通常包括一些服务端和客户端的一些信息和约定的字段。列举几个常见字段：</p><table><thead><tr><th>字段</th><th>请求头/响应头</th><th>描述</th></tr></thead><tbody><tr><td>content-type</td><td>请求/响应</td><td>发送的 body 类型 mime type</td></tr><tr><td>Host</td><td>请求</td><td>请求方的主机，一般是域名或者 ip</td></tr><tr><td>User-Agent</td><td>请求</td><td>标识浏览器类型</td></tr><tr><td>Accept</td><td>请求</td><td>可以接收的 body 类型 mime type,比如 text/html</td></tr><tr><td>Content-Encoding</td><td>请求/响应</td><td>发送的编码格式</td></tr><tr><td>date</td><td>响应</td><td>服务端时间</td></tr></tbody></table><ul><li>空行</li></ul><p>用来<code>区分头部和实体</code>。</p><ul><li>实体</li></ul><p>body，请求报文对应请求体, 响应报文对应响应体。</p><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https" aria-hidden="true">#</a> HTTPS</h2><p>HTTPS 是在 HTTP 和 TCP 之间建立了一个安全层，HTTP 与 TCP 通信的时候，必须先进过一个安全层，对数据包进行加密，然后将加密后的数据包传送给 TCP，相应的 TCP 必须将数据包解密，才能传给上面的 HTTP。</p><p>加密是在传输层与应用层之前通过 SSL/TLS 协议进行加密（SSL 是 TLS 的前身）。</p><p>TLS 使用了对称加密和非对称加密算法。</p><p>对称加密：</p><p>对称加密主要用于对信息进行加密，也就是双方拥有相同的秘钥，双方都知道如何将密文加密解密。</p><p>非对称加密：</p><p>有公钥私钥，公钥用于数据加密，用相应的私密才能解密，私钥只有分发公钥的一方才知道。</p><p>HTTPS 将对称加密与非对称加密结合起来，充分利用两者各自的优势。在交换密钥环节使用非对称加密方式，之后的建立通信交换报文阶段则使用对称加密方式。</p><p>具体做法是：发送密文的一方使用公钥进行加密处理“密钥”，对方收到被加密的信息后，再使用自己的私有密钥进行解密。这样可以确保交换的密钥是安全的前提下，之后使用对称加密方式进行通信交换报文。所以，HTTPS 采用对称加密和非对称加密两者并用的混合加密机制。</p><h3 id="https-和-http-的区别" tabindex="-1"><a class="header-anchor" href="#https-和-http-的区别" aria-hidden="true">#</a> HTTPS 和 HTTP 的区别</h3><ol><li>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（TLS+HTTP） 数据传输过程是加密的，安全性较好。</li><li>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。</li><li>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还要加上 TLS 握手需要的 9 个包，所以一共是 12 个包。</li><li>HTTPS 标准端口 443，HTTP 标准端口 80。</li><li>HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。</li><li>HTTPS 基于传输层，HTTP 基于应用层。</li><li>HTTPS 对搜索引擎更友好，利于 SEO，谷歌、百度优先索引 HTTPS 网页。</li></ol><h2 id="http2-0" tabindex="-1"><a class="header-anchor" href="#http2-0" aria-hidden="true">#</a> HTTP2.0</h2><h3 id="二进制传输" tabindex="-1"><a class="header-anchor" href="#二进制传输" aria-hidden="true">#</a> 二进制传输</h3><p>这个是 HTTP 2.0 加强性能的核心。在之前的 HTTP 版本中是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。</p><p>为了保证 HTTP 不受影响，那就需要在应用层（HTTP2.0）和传输层（TCP or UDP）之间增加一个二进制分帧层。在二进制分帧层上，HTTP2.0 会将所有传输的信息分为更小的消息和帧，并采用<code>二进制格式编码</code>，其中 HTTP1.x 的首部信息会被封装到 Headers 帧，而 Request Body 则封装到 Data 帧。</p><h3 id="多路复用" tabindex="-1"><a class="header-anchor" href="#多路复用" aria-hidden="true">#</a> 多路复用</h3><p>HTTP2.0 中,基于二进制分帧层，HTTP2.0 可以在共享 TCP 连接的基础上同时发送请求和响应。HTTP 消息被分解为独立的帧，而不破坏消息本身的语义，交错发出去，在另一端根据流标识符和首部将他们重新组装起来。 通过该技术，可以避免 HTTP 旧版本的队头阻塞问题，极大提高传输性能。</p><h3 id="header-压缩" tabindex="-1"><a class="header-anchor" href="#header-压缩" aria-hidden="true">#</a> Header 压缩</h3><p>在 HTTP1.0 中，使用文本的形式传输 header，在 header 中携带 cookie 的话，每次都需要重复传输几百到几千的字节，这着实是一笔不小的开销。</p><p>在 HTTP2.0 中，使用了 HPACK（HTTP2 头部压缩算法）压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。</p><h3 id="服务端-push" tabindex="-1"><a class="header-anchor" href="#服务端-push" aria-hidden="true">#</a> 服务端 Push</h3><p>HTTP2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。服务器向客户端推送资源无需客户端明确的请求。 服务端根据客户端的请求，提前返回多个响应，推送额外的资源给客户端。</p>',41),r={},T=(0,d(3744).Z)(r,[["render",function(e,t){return a}]])},3744:(e,t)=>{t.Z=(e,t)=>{for(const[d,a]of t)e[d]=a;return e}}}]);