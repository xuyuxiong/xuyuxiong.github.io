"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[4479],{4658:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-2f190c4a",path:"/learningRoute/01.html",title:"第一阶段",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"项目开发阶段",slug:"项目开发阶段",children:[{level:3,title:"DevOps",slug:"devops",children:[]}]},{level:2,title:"项目需求分析",slug:"项目需求分析",children:[{level:3,title:"需求分析内容(从哪里来)",slug:"需求分析内容-从哪里来",children:[]},{level:3,title:"需求分析中重点的内容(抓痛点)",slug:"需求分析中重点的内容-抓痛点",children:[]},{level:3,title:"需求分析文档工具(怎么做)",slug:"需求分析文档工具-怎么做",children:[]}]},{level:2,title:"原型设计",slug:"原型设计",children:[]},{level:2,title:"Docker 测试环境",slug:"docker-测试环境",children:[{level:3,title:"Dockerfile 作用",slug:"dockerfile-作用",children:[]}]},{level:2,title:"Linux 常见命令",slug:"linux-常见命令",children:[]},{level:2,title:"RESTful API",slug:"restful-api",children:[{level:3,title:"常见的接口测试工具",slug:"常见的接口测试工具",children:[]},{level:3,title:"什么是 Mock 数据",slug:"什么是-mock-数据",children:[]}]},{level:2,title:"前端工程化",slug:"前端工程化",children:[{level:3,title:"为什么要前端工程化",slug:"为什么要前端工程化",children:[]},{level:3,title:"怎么做？",slug:"怎么做",children:[]},{level:3,title:"gulp",slug:"gulp",children:[]},{level:3,title:"组件化思想",slug:"组件化思想",children:[]}]},{level:2,title:"前端框架分类及选型",slug:"前端框架分类及选型",children:[{level:3,title:"koa",slug:"koa",children:[]},{level:3,title:"UI 框架选型",slug:"ui-框架选型",children:[]},{level:3,title:"JS 框架选型",slug:"js-框架选型",children:[]},{level:3,title:"登录模块开发",slug:"登录模块开发",children:[]}]},{level:2,title:"文档管理",slug:"文档管理",children:[]},{level:2,title:"版本管理",slug:"版本管理",children:[{level:3,title:"语义化版本",slug:"语义化版本",children:[]},{level:3,title:"git 基础",slug:"git-基础",children:[]},{level:3,title:"gitflow 及团队协作",slug:"gitflow-及团队协作",children:[]},{level:3,title:"gitlab/github/gitee 使用 私有部署方案",slug:"gitlab-github-gitee-使用-私有部署方案",children:[]}]},{level:2,title:"缺陷控制与自动化流程",slug:"缺陷控制与自动化流程",children:[{level:3,title:"缺陷控制概念及基本方法",slug:"缺陷控制概念及基本方法",children:[]},{level:3,title:"项目质量/进度管理工作流",slug:"项目质量-进度管理工作流",children:[]},{level:3,title:"三类缺陷控制工具介绍",slug:"三类缺陷控制工具介绍",children:[]}]},{level:2,title:"自动化",slug:"自动化",children:[{level:3,title:"CI/CD 流程：持续集成、持续部署",slug:"ci-cd-流程-持续集成、持续部署",children:[]},{level:3,title:"Jenkins 简介、安装及使用",slug:"jenkins-简介、安装及使用",children:[]},{level:3,title:"其他 CI/CD 工具：Travis CI,Circle CI",slug:"其他-ci-cd-工具-travis-ci-circle-ci",children:[]}]},{level:2,title:"NoSQL 数据库的设计与集成",slug:"nosql-数据库的设计与集成",children:[{level:3,title:"NoSQL 意义",slug:"nosql-意义",children:[]},{level:3,title:"Redis",slug:"redis",children:[]}]},{level:2,title:"OOCSS",slug:"oocss",children:[]},{level:2,title:"BEM",slug:"bem",children:[]},{level:2,title:"SMACSS",slug:"smacss",children:[]},{level:2,title:"ITCSS",slug:"itcss",children:[]},{level:2,title:"ACSS",slug:"acss",children:[]},{level:2,title:"项目中 CSS 架构方案的选择",slug:"项目中-css-架构方案的选择",children:[]},{level:2,title:"setting 层实现",slug:"setting-层实现",children:[]}],filePathRelative:"learningRoute/01.md",git:{updatedTime:1635519893e3,contributors:[{name:"徐誉雄",email:"xuyuxiong@shinemo.com",commits:1}]}}},2333:(a,n,s)=>{s.r(n),s.d(n,{default:()=>m});var e=s(6252);const t=(0,e.uE)('<h1 id="第一阶段" tabindex="-1"><a class="header-anchor" href="#第一阶段" aria-hidden="true">#</a> 第一阶段</h1><h2 id="项目开发阶段" tabindex="-1"><a class="header-anchor" href="#项目开发阶段" aria-hidden="true">#</a> 项目开发阶段</h2><p>角色人群: 开发、测试、运维、产品 工作中常见问题 问题根源：自动化、标准化、规范化、文档化 解决方案</p><ul><li>对组织人员培训，转变思维向自动化/规范化转型</li><li>配合效率工具(自动化) 对流程进行简化/标准化</li><li>全员参与并实践</li></ul><h3 id="devops" tabindex="-1"><a class="header-anchor" href="#devops" aria-hidden="true">#</a> DevOps</h3><p>project -&gt; git github -&gt; jenkins -&gt; test -&gt; docker 开发工具 -&gt; docker -&gt; 缺陷控制 -&gt; 文档管理 -&gt; 测试</p><h2 id="项目需求分析" tabindex="-1"><a class="header-anchor" href="#项目需求分析" aria-hidden="true">#</a> 项目需求分析</h2><h3 id="需求分析内容-从哪里来" tabindex="-1"><a class="header-anchor" href="#需求分析内容-从哪里来" aria-hidden="true">#</a> 需求分析内容(从哪里来)</h3><h4 id="前置考虑" tabindex="-1"><a class="header-anchor" href="#前置考虑" aria-hidden="true">#</a> 前置考虑</h4><ul><li>业务型: 无纸化带来的效率提升</li><li>痛点型：市场决定的风声浪口</li><li>功能型: 企业&amp;客户需求、解决流量入口</li></ul><hr><ul><li>除了考虑功能的实现，还要考虑时间/成本</li><li>形成需求文档，用户回馈确认</li><li>引导用户的需求，创造用户需求</li></ul><h4 id="需求分析组成部分" tabindex="-1"><a class="header-anchor" href="#需求分析组成部分" aria-hidden="true">#</a> 需求分析组成部分</h4><ul><li>项目需求 1.全栈项目 2.前端痛点 3.企业对接 4.开发周期 5.跨端应用 6.多场景</li><li>业务需求 1.社区应用 2.登录鉴权 3.用户体系 4.积分系统 5.发帖收藏 6.点赞收藏 7.内容管理</li><li>用户需求 1.交互简单 2.界面美观 3.运行流畅 4.功能实用 5.定制需求 6.其他需求</li><li>具体产出 1.需求文档 2.项目选型 3.技术栈选型 4.开发周期评估 5.项目进度评估 6.分项原型图 7.分项流程图</li></ul><h4 id="pc-端需求分析" tabindex="-1"><a class="header-anchor" href="#pc-端需求分析" aria-hidden="true">#</a> PC 端需求分析</h4><p>推荐网站：花瓣、站酷、蓝色理想 文档产出：重要页面的原型图、主体页面的流程图、需求文档</p><h4 id="服务端需求分析" tabindex="-1"><a class="header-anchor" href="#服务端需求分析" aria-hidden="true">#</a> 服务端需求分析</h4><ul><li>用户、权限管理</li><li>内容管理、首页管理</li><li>其他功能(日志、多语言)</li></ul><h4 id="webapp-和小程序原型设计" tabindex="-1"><a class="header-anchor" href="#webapp-和小程序原型设计" aria-hidden="true">#</a> WebApp 和小程序原型设计</h4><ul><li>主体功能</li><li>技术实现/交互体验</li><li>用户数据与流量入口</li></ul><h4 id="技术栈选择" tabindex="-1"><a class="header-anchor" href="#技术栈选择" aria-hidden="true">#</a> 技术栈选择</h4><ul><li>团队技术实力与业务需求结合</li><li>能够复用，坚决不造轮子，需要造轮子，坚决不牵强</li><li>怎么简单怎么来，多考虑时间，进度、质量因素 文档产出：重要页面原型图、主体页面的流程图及跳转逻辑、需求文档</li></ul><h4 id="需求分析工具" tabindex="-1"><a class="header-anchor" href="#需求分析工具" aria-hidden="true">#</a> 需求分析工具</h4><p>原型类：Axure，Ps，墨刀，蓝湖 思维脑图：Xmind,MindNode(Mac) 流程图：Visio/OmniGraffle(Mac)/processOn</p><h3 id="需求分析中重点的内容-抓痛点" tabindex="-1"><a class="header-anchor" href="#需求分析中重点的内容-抓痛点" aria-hidden="true">#</a> 需求分析中重点的内容(抓痛点)</h3><h4 id="需求变更" tabindex="-1"><a class="header-anchor" href="#需求变更" aria-hidden="true">#</a> 需求变更</h4><ul><li>考虑是否合理</li><li>是否是项目范围内的变更，对主体业务是否有影响</li><li>明确需求变更的流程，确定需求变更</li></ul><h3 id="需求分析文档工具-怎么做" tabindex="-1"><a class="header-anchor" href="#需求分析文档工具-怎么做" aria-hidden="true">#</a> 需求分析文档工具(怎么做)</h3><h2 id="原型设计" tabindex="-1"><a class="header-anchor" href="#原型设计" aria-hidden="true">#</a> 原型设计</h2><p>原型：用线条、图形描绘出的产品框架，也称为线框图 设计：综合考虑产品目标、功能需求场景、用户体验等因素，对产品的各模块、界面和元素进行的合理性排序过程 产品阶段：想法 -&gt; 需求采集 -&gt; 功能结构 -&gt; 原型设计 -&gt; 产品需求文档</p><h2 id="docker-测试环境" tabindex="-1"><a class="header-anchor" href="#docker-测试环境" aria-hidden="true">#</a> Docker 测试环境</h2><p>ssh imooc // 免密码连接 linux lsb_release -a // 查看 linux 版本 uname -a // 查看 linux 内核 df // 磁盘空间查看 ls -la // 文件权限 top // cpu/进程 docker --version // docker 版本 docker compose // docker 集合命令工具 docker pull mongo // 安装 mongo 镜像 docker images // 查看已安装镜像 docker ps // 正在运行 docker 服务 关闭防火墙： ubuntu: service ufw stop centos: service firewalld stop firewall-cmd --zone=public --add-port=10500/tcp --permanent // 防火墙放行 10500 端口 firewall-cmd --reload // 重启防火墙 systemctl start docker // 启动 docker</p><hr><p>常见命令(run/start/stop/restart/log) docker-compose 集成命令 docker 仓库(docker hub 及私有仓库 Harbor) 主要特性：</p><ul><li>文件、资源、网络隔离</li><li>变更管理、日志记录</li><li>写时复制</li></ul><h3 id="dockerfile-作用" tabindex="-1"><a class="header-anchor" href="#dockerfile-作用" aria-hidden="true">#</a> Dockerfile 作用</h3><ul><li>用于产生 Docker 镜像</li><li>Dockerfile 按照步骤构建，产生文件系统</li><li>Dockerfile 是镜像的配置文件，高度可配置</li></ul><h2 id="linux-常见命令" tabindex="-1"><a class="header-anchor" href="#linux-常见命令" aria-hidden="true">#</a> Linux 常见命令</h2><ul><li>文档型：文档相关命令(touch,cat,echo,rm,vi,cd) touch // 创建文件 vi // 编辑文件 cat // 查看文件 echo &#39;hello world&#39; &gt;&gt; test.txt // 文件追加内容 echo &#39;hello world&#39; &gt; text.txt // 覆盖原本内容 rm test.txt // 删除文件 rm -r testDir // 删除文件夹 rm -rf // 强制删除</li><li>硬件型：磁盘/进程/服务/网络 ps -ef | grep docker // 查看进程 kill -9 21937 // 尝试终止某个进程 service sshd status // 查看服务状态 service sshd restart // 重启服务</li><li>功能型：压缩/解压，下载，远程 wget &#39;http://xxx&#39; // 下载资源 tar zxvf xxx // 解压文件(显示解压过程) tar zcvf xxx.tar.gz xxx // 压缩文件</li></ul><p>ssh root @47.105.121.152 修改 ssh 默认端口 semanage port -a -t ssh_port_t -p tcp 10022 yum whatprovides semanage yum install -y xxx service sshd status 先查看状态 systemctl status firewalld.service // 查看防火墙信息 netstat -anlp | grep sshd 查看端口 ssh 免密登录</p><h2 id="restful-api" tabindex="-1"><a class="header-anchor" href="#restful-api" aria-hidden="true">#</a> RESTful API</h2><p>表现层状态转移 特点：</p><ul><li>客户端-服务端 数据与存储分开，通过简化服务器组件实现跨平台的应用</li><li>无状态，可缓存 包含理解请求所需的所有信息</li><li>统一接口</li></ul><h3 id="常见的接口测试工具" tabindex="-1"><a class="header-anchor" href="#常见的接口测试工具" aria-hidden="true">#</a> 常见的接口测试工具</h3><ul><li>插件类 Postman, DHC, REST client</li><li>平台类 Yapi, DOClever, RAP2, EasyMock, Swagger</li><li>终端类 Postman, SoapUI, DOClever</li></ul><h3 id="什么是-mock-数据" tabindex="-1"><a class="header-anchor" href="#什么是-mock-数据" aria-hidden="true">#</a> 什么是 Mock 数据</h3><ul><li>模拟真实接口 实现效率开发，前后台同步，特别是分布式的系统</li><li>虚拟业务场景 还有一些异常逻辑、交互逻辑</li><li>压力测试</li></ul><h4 id="mock-数据工具" tabindex="-1"><a class="header-anchor" href="#mock-数据工具" aria-hidden="true">#</a> Mock 数据工具</h4><p>YApi、Easy Mock、DOClever、fast mock</p><h4 id="mock-数据开发流程" tabindex="-1"><a class="header-anchor" href="#mock-数据开发流程" aria-hidden="true">#</a> Mock 数据开发流程</h4><p>前端定义接口-&gt;完成静态页面-&gt;完成 ui 交互-&gt;对接真实接口-&gt;页面/逻辑测试-&gt;线上部署</p><h2 id="前端工程化" tabindex="-1"><a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a> 前端工程化</h2><p>前端工程化是指将前端开发的流程规范化、标准化，包括开发流程、技术选型、代码规范、构建发布等，用于提升前端工程师的开发效率和代码质量。 开发流程 -&gt; 技术选型 -&gt; 代码规范 -&gt; 构建发布</p><h3 id="为什么要前端工程化" tabindex="-1"><a class="header-anchor" href="#为什么要前端工程化" aria-hidden="true">#</a> 为什么要前端工程化</h3><ul><li>复杂度高：前端项目的多功能、多页面、多状态、多系统</li><li>规模大：团队开发，多人协作，代码质量管理</li><li>要求高：页面性能优化、CSS 兼容性、单页面应用、服务端渲染</li></ul><h3 id="怎么做" tabindex="-1"><a class="header-anchor" href="#怎么做" aria-hidden="true">#</a> 怎么做？</h3><ul><li>从业务着手 简单的单页面应用，使用 gulp 打包+同步工具实现开发全流程</li><li>从复杂度考虑 jenkens git/gitlab webpack Reack/Vue/Angular</li><li>从已知到未知的拓展</li></ul><h3 id="gulp" tabindex="-1"><a class="header-anchor" href="#gulp" aria-hidden="true">#</a> gulp</h3><ul><li>易于使用</li><li>构建快速</li><li>插件系统</li><li>易于学习 定义任务 -&gt; 输入文件 -&gt; 处理文件 -&gt; 输出 -&gt; 完成任务 安装： yarn add gulp -D 配置文件 gulpfile.js</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> src<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> series<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> browserSync <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;browser-sync&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> reload <span class="token operator">=</span> browserSync<span class="token punctuation">.</span>reload\n<span class="token keyword">const</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;del&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> plugins <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp-load-plugins&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 处理js</span>\n<span class="token keyword">function</span> <span class="token function">js</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">&#39;js/*.js&#39;</span><span class="token punctuation">)</span>\n        <span class="token comment">// 下一个处理环节</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>glugins<span class="token punctuation">.</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">&#39;./dist/js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">{</span> stream<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 处理css</span>\n<span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">&#39;css/*.scss&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token function">sass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>outputStyle<span class="token operator">:</span> <span class="token string">&#39;compressed&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            cascade<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n            remove<span class="token operator">:</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">&#39;./dist/css&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">{</span> stream<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token comment">// package.json 还需要配置</span>\n        <span class="token comment">// &quot;browserslist&quot;: [</span>\n            <span class="token comment">// &quot;last 2 Version&quot;,</span>\n            <span class="token comment">// &quot;&gt; 2%&quot;</span>\n        <span class="token comment">// ]</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 监听</span>\n<span class="token keyword">function</span> <span class="token function">watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">&#39;js/*.js&#39;</span><span class="token punctuation">,</span> js<span class="token punctuation">)</span>\n    <span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">&#39;css/*.scss&#39;</span><span class="token punctuation">,</span> css<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 清理</span>\n<span class="token keyword">function</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">del</span><span class="token punctuation">(</span><span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span>\n    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// server任务</span>\n<span class="token keyword">function</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    browserSync<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        server<span class="token operator">:</span> <span class="token punctuation">{</span>\n            baseDir<span class="token operator">:</span> <span class="token string">&#39;./&#39;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nexports<span class="token punctuation">.</span>scripts <span class="token operator">=</span> js\nexports<span class="token punctuation">.</span>styles <span class="token operator">=</span> css\nexports<span class="token punctuation">.</span>watcher <span class="token operator">=</span> watcher\nexports<span class="token punctuation">.</span>clean <span class="token operator">=</span> clean\nexports<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    clean<span class="token punctuation">,</span>\n    js<span class="token punctuation">,</span>\n    css<span class="token punctuation">,</span>\n    serve<span class="token punctuation">,</span>\n    watcher\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 命令行窗口使用</span>\ngulp scripts\ngulp styles\n<span class="token operator">...</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><p>常用插件 gulp-uglify // 混淆 js gulp-rename gulp-clean-css gulp-autoprefixer gulp-sass gulp-load-plugins</p><h3 id="组件化思想" tabindex="-1"><a class="header-anchor" href="#组件化思想" aria-hidden="true">#</a> 组件化思想</h3><p>组件化是指将页面的功能模块进行拆分，封装。组件代码包含了组件所有的功能代码与样式。 组件化的作用：拓展性、复用性、高可维护。 组件化原则：</p><ul><li>独立功能模块(松耦合、扁平化、提炼精华)</li><li>独立的状态变化(统一的状态管理)</li><li>从上而下的逻辑思考，从下而上的组件拆分</li></ul><h2 id="前端框架分类及选型" tabindex="-1"><a class="header-anchor" href="#前端框架分类及选型" aria-hidden="true">#</a> 前端框架分类及选型</h2><h3 id="koa" tabindex="-1"><a class="header-anchor" href="#koa" aria-hidden="true">#</a> koa</h3><ul><li>路由：koa-router</li><li>协议解析：koa-body</li><li>跨域处理：koa/cors</li><li>json 格式化: koa-json npm install -S koa-router koa-body @koa/cors koa-json</li></ul><h4 id="开发目录结构" tabindex="-1"><a class="header-anchor" href="#开发目录结构" aria-hidden="true">#</a> 开发目录结构</h4><ul><li>按功能模块进行划分</li><li>路由压缩：koa-combine-routers</li><li>静态资源：koa-static</li><li>安全插件：koa-helmet // provides important security headers to make app more secure npm install koa-combine-routers -S</li></ul><h4 id="koa-配置开发热加载-es6-语法支持-webpack-配置" tabindex="-1"><a class="header-anchor" href="#koa-配置开发热加载-es6-语法支持-webpack-配置" aria-hidden="true">#</a> koa 配置开发热加载 ES6 语法支持&amp;webpack 配置</h4><p>npm install -D nodemon npm install -D webpack webpack-cli npm install -D clean-webpack-plugin webpack-node-externals // 不会处理 node_modules 底下的文件 @babel/core @babel/node @babel/preset-env babel-loader cross-env // cross-env 能保证跨平台下环境变量正确设置</p><h4 id="webpack-调试" tabindex="-1"><a class="header-anchor" href="#webpack-调试" aria-hidden="true">#</a> webpack 调试</h4><p>npx node --inspect-brk ./node_modules/.bin/webpack --inline --progress chrome://inspect</p><h4 id="优化-webpack-配置-npm-构建脚本" tabindex="-1"><a class="header-anchor" href="#优化-webpack-配置-npm-构建脚本" aria-hidden="true">#</a> 优化 webpack 配置 npm 构建脚本</h4><p>检查 package.json 插件更新 npm install -g npm-check-updates 用法: ncu 中间件整合 koa-compose npm install koa-compose -S npm i webpack-merge -D // 压缩代码 npm install terser-webpack-plugin --save-dev</p><h4 id="koa-应用打包优化" tabindex="-1"><a class="header-anchor" href="#koa-应用打包优化" aria-hidden="true">#</a> koa 应用打包优化</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>\n    cacheGroups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        commons<span class="token operator">:</span> <span class="token punctuation">{</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;commons&#39;</span><span class="token punctuation">,</span>\n            chunks<span class="token operator">:</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span>\n            minChunks<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n            enforce<span class="token operator">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>npm install -D rimraf npm install -S koa-compress // 压缩</p><h3 id="ui-框架选型" tabindex="-1"><a class="header-anchor" href="#ui-框架选型" aria-hidden="true">#</a> UI 框架选型</h3><h4 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h4><p>移动端: Mint Cube MUI Vant Vux Muse-ui PC 端: Element UI iView Layui Ant Design Bootstrap Vuetify</p><ul><li>业务场景 PC 移动 web 小程序 响应式</li><li>方便集成</li><li>兼容性好</li><li>组件化思想</li><li>持续更新</li></ul><h3 id="js-框架选型" tabindex="-1"><a class="header-anchor" href="#js-框架选型" aria-hidden="true">#</a> JS 框架选型</h3><h4 id="分类-1" tabindex="-1"><a class="header-anchor" href="#分类-1" aria-hidden="true">#</a> 分类</h4><ul><li><p>类库: JQuery Lodash</p></li><li><p>JS 库: React Vue Angular</p></li><li><p>工具: Webpack Jest ESLint 应用类(Echarts/D3/three)</p></li><li><p>团队的技术能力</p></li><li><p>应用场景(后台？性能要求？时间要求)</p></li><li><p>成熟的社区，成熟的生态</p></li></ul><h3 id="登录模块开发" tabindex="-1"><a class="header-anchor" href="#登录模块开发" aria-hidden="true">#</a> 登录模块开发</h3><h4 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析" aria-hidden="true">#</a> 需求分析</h4><ul><li>功能需求，需求拆解 1.用户输入验证 2.拦截非正常的登录请求 3.登录验证(验证机制)</li><li>流程图及原型图的绘制</li><li>形成文档</li></ul><h4 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h4><p>// 验证码库 npm install --save svg-captcha // 表单验证 Vuelidate // npm install vuelidate -D VeeValidate node-mailer // 邮件发送</p><h2 id="文档管理" tabindex="-1"><a class="header-anchor" href="#文档管理" aria-hidden="true">#</a> 文档管理</h2>',91),l=(0,e._)("li",null,"Markdown",-1),i=(0,e._)("li",null,"Typora",-1),p=(0,e.Uk)("ShowDoc "),c={href:"http://showdoc.com.cn",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("官网"),o=(0,e._)("li",null,"云笔记",-1),u=(0,e._)("li",null,"hexo+github pages 自建博客",-1),d=(0,e.uE)('<h2 id="版本管理" tabindex="-1"><a class="header-anchor" href="#版本管理" aria-hidden="true">#</a> 版本管理</h2><h3 id="语义化版本" tabindex="-1"><a class="header-anchor" href="#语义化版本" aria-hidden="true">#</a> 语义化版本</h3><p>版本格式 1.2.3-beta.1 + meta 主版本.次版本.修订号-先行版本 + 元数据 alpha -&gt; beta -&gt; rc -&gt; release alpha: 内部测试版本，内部测试人员使用 beta: 公测版本，消除了严重错误，该阶段还会加入新功能 rc: 这个版本不会加入新功能，主要是修改 Bug</p><h3 id="git-基础" tabindex="-1"><a class="header-anchor" href="#git-基础" aria-hidden="true">#</a> git 基础</h3><p>从工作区 git add -&gt; 到 stage 半控制区 git commit -&gt; 再到 master 完全控制区 git log git reflog // 会记录分支切换重置删除等操作的记录 git reset --hard 22c7f3x git reset --hard head^ // 回退到上一次提交 git reset --hard head~1 // 回退到前一次提交 git checkout dev // 切换分支 git stash // 暂时保存文件 git stash apply // 找回刚才暂时保存的文件 git stash --help git diff // 查看本次文件修改的情况 git branch // 查看当前处在哪个分支 git branch dev // 创建 dev 分支 git branch -D dev // 删除 dev 分支 git checkout -b dev // 创建并切换到 dev 分支 git fetch // 查看哪个分子有修改，不合并 git fetch origin some-branch:dev git merge FETCH_HEAD // 合并刚才拉取的 git tag // 打标签 git push origin master --tags // 推送 tag 到远程 git push origin :refs/tags/v1.0.0 // 删除远程的 tag git push origin :feature // 删除远程的 feature 分支 git branch -D feature // 删除本地的 feature 分支 git checkout -- test.txt // 放弃本次文件的修改 git rm -- cached -r . // 清缓存 git rebase -i head~3 // 跟先前的多少次做一次变基 git push origin master -f // 强制推送把先前的提交覆盖</p><h4 id="ssh-密钥管理" tabindex="-1"><a class="header-anchor" href="#ssh-密钥管理" aria-hidden="true">#</a> SSH 密钥管理</h4><p>生成密钥 管理密钥</p><h4 id="git-配置" tabindex="-1"><a class="header-anchor" href="#git-配置" aria-hidden="true">#</a> git 配置</h4><p>git config --global user.name &quot;zhangsan&quot; git config --global user.email &quot;zhangsan@qq.com&quot; remote 管理</p><h4 id="git-指令表" tabindex="-1"><a class="header-anchor" href="#git-指令表" aria-hidden="true">#</a> git 指令表</h4>',10),h={href:"https://liaoxuefeng.gitee.io/resource.liaoxuefeng.com/git/git-cheat-sheet.pdf",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("git指令"),b=(0,e.uE)('<h3 id="gitflow-及团队协作" tabindex="-1"><a class="header-anchor" href="#gitflow-及团队协作" aria-hidden="true">#</a> gitflow 及团队协作</h3><p>master -&gt; pre-production -&gt; production</p><h3 id="gitlab-github-gitee-使用-私有部署方案" tabindex="-1"><a class="header-anchor" href="#gitlab-github-gitee-使用-私有部署方案" aria-hidden="true">#</a> gitlab/github/gitee 使用 私有部署方案</h3><p>gitlab 权限控制 docker安装 gitlab</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>sudo docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>detach \\\n  <span class="token punctuation">-</span><span class="token punctuation">-</span>hostname gitlab.example.com \\\n  <span class="token punctuation">-</span><span class="token punctuation">-</span>publish 13443<span class="token punctuation">:</span>443 <span class="token punctuation">-</span><span class="token punctuation">-</span>publish 13800<span class="token punctuation">:</span>80 <span class="token punctuation">-</span><span class="token punctuation">-</span>publish 13822<span class="token punctuation">:</span>22 \\\n  <span class="token punctuation">-</span><span class="token punctuation">-</span>name gitlab \\\n  <span class="token punctuation">-</span><span class="token punctuation">-</span>restart always \\\n  <span class="token punctuation">-</span><span class="token punctuation">-</span>volume $GITLAB_HOME/config<span class="token punctuation">:</span>/etc/gitlab \\\n  <span class="token punctuation">-</span><span class="token punctuation">-</span>volume $GITLAB_HOME/logs<span class="token punctuation">:</span>/var/log/gitlab \\\n  <span class="token punctuation">-</span><span class="token punctuation">-</span>volume $GITLAB_HOME/data<span class="token punctuation">:</span>/var/opt/gitlab \\\n  gitlab/gitlab<span class="token punctuation">-</span>ee<span class="token punctuation">:</span>latest\n\n// 查看运行端口\ndocker ps <span class="token punctuation">|</span> grep gitlab\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>以组为单元，设置管理员</li><li>熟悉 Merge Request, 写好 git commit</li><li>及时回收权限，或者设置过期时间 三种产生.gitignore 文件的方法</li></ul><ol><li>github/gitignore</li><li>http://gitignore.io</li><li>插件市场 .gitignore generator 图形化工具 sourcetree vscode gitlens</li></ol><h2 id="缺陷控制与自动化流程" tabindex="-1"><a class="header-anchor" href="#缺陷控制与自动化流程" aria-hidden="true">#</a> 缺陷控制与自动化流程</h2><h3 id="缺陷控制概念及基本方法" tabindex="-1"><a class="header-anchor" href="#缺陷控制概念及基本方法" aria-hidden="true">#</a> 缺陷控制概念及基本方法</h3><h4 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h4><p>缺陷控制就是在项目全生命周期中，保障项目质量的一系列行为。</p><h4 id="工作流" tabindex="-1"><a class="header-anchor" href="#工作流" aria-hidden="true">#</a> 工作流：</h4><ul><li>质量管理:</li></ul><ol><li>需求阶段: 沟通、形成文档、客户确认</li><li>开发阶段: Lint、code review、规范(开发规范 运维规范)、测试(编写测试用例、自动化测试)</li><li>运维阶段: 监控、日志、更新迭代(责任到人、功能到点、时间设限)</li></ol><ul><li>进度管理:</li></ul><ol><li>需求阶段: 从上至下分析、类比分析、经验分析</li><li>开发阶段</li><li>运维阶段</li></ol><h4 id="缺陷分类及结果" tabindex="-1"><a class="header-anchor" href="#缺陷分类及结果" aria-hidden="true">#</a> 缺陷分类及结果</h4><ul><li>需求不明确: 1.需求经常变化 2.需求文档不清晰 3.客户未确定需求 4.内部反推动的工作风气 5.内部模块未讨论清楚，分工不明确 解决办法: 沟通/督办</li><li>进度有超期: 1.经常项目上线加班 2.经常前期推不动，重度依赖 UI 设计、产品经理 3.放风式管理 4.自驱力不足 解决办法: 缺陷跟踪(是否有重复劳动...)</li><li>工程有 Bug 1.无代码风格指南 2.无代码质量监测 3.测试流程混乱 4.没有自动化测试闭环 5.发布环境/测试环境同步 解决办法: 代码规范 Lint</li><li>协同有问题 1.项目经理太忙 2.项目经理经验不足 3.有想法的人太多 4.没有具体的分工 5.缺少协同工具 解决办法: 清单/待办</li></ul><h3 id="项目质量-进度管理工作流" tabindex="-1"><a class="header-anchor" href="#项目质量-进度管理工作流" aria-hidden="true">#</a> 项目质量/进度管理工作流</h3><p>代码 -&gt; 团队 -&gt; 项目 -&gt; 公司</p><h3 id="三类缺陷控制工具介绍" tabindex="-1"><a class="header-anchor" href="#三类缺陷控制工具介绍" aria-hidden="true">#</a> 三类缺陷控制工具介绍</h3><ul><li>代码类 ESLint JSLint StyleLint</li><li>流程类 Jira 禅道 Redmine</li><li>工具类 Trello Teambition 钉钉 石墨</li></ul><h4 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> ESLint</h4><p>npm install eslint -S npx eslint --init // 创建配置文件 ESLint 规则和配置方法</p><ul><li>规则分为三种等级：off(0)关闭、warn(1)警告、error(2)强制</li><li>在 eslint 配置文件中配置 rules，对应不同类型的规则</li><li>在行内书写规则，需要卸载/<em>eslint ...</em>/ vscode eslint 插件 npm install -g eslint // vue eslint 插件 npm install --save-dev eslint-plugin-vue</li></ul><h2 id="自动化" tabindex="-1"><a class="header-anchor" href="#自动化" aria-hidden="true">#</a> 自动化</h2><h3 id="ci-cd-流程-持续集成、持续部署" tabindex="-1"><a class="header-anchor" href="#ci-cd-流程-持续集成、持续部署" aria-hidden="true">#</a> CI/CD 流程：持续集成、持续部署</h3><p>什么是自动化 是指前端代码的自动化构建、打包、测试及部署等流程 什么是 CI/CD 持续集成 不同的人持续的往仓库发送功能代码，出现问题可以及时回退 持续部署 建立在持续集成基础上 前端自动化通常与 CI/CD 流程相结合</p><h4 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h4><ul><li>基本的版本控制，培养协同效率</li><li>创建工程化项目，参与开源项目实践</li><li>按需取用，推动团队自动化流程</li></ul><h3 id="jenkins-简介、安装及使用" tabindex="-1"><a class="header-anchor" href="#jenkins-简介、安装及使用" aria-hidden="true">#</a> Jenkins 简介、安装及使用</h3><p>开源免费持续集成工具</p><h3 id="其他-ci-cd-工具-travis-ci-circle-ci" tabindex="-1"><a class="header-anchor" href="#其他-ci-cd-工具-travis-ci-circle-ci" aria-hidden="true">#</a> 其他 CI/CD 工具：Travis CI,Circle CI</h3><p>配置自动化任务、构建打包、发布到 github pages</p><h2 id="nosql-数据库的设计与集成" tabindex="-1"><a class="header-anchor" href="#nosql-数据库的设计与集成" aria-hidden="true">#</a> NoSQL 数据库的设计与集成</h2><h3 id="nosql-意义" tabindex="-1"><a class="header-anchor" href="#nosql-意义" aria-hidden="true">#</a> NoSQL 意义</h3><p>1.易拓展 高性能 高可用 2.较容易映射复杂数据 3.无事务特性要求(ACID 特性)</p><h4 id="nosql-数据库设计" tabindex="-1"><a class="header-anchor" href="#nosql-数据库设计" aria-hidden="true">#</a> NoSQL 数据库设计</h4><ul><li>常见场景及设计方法(内嵌、父/子引用、反范式) 内嵌：是指存在关联关系的文档，放在同一文档中以数组的形式存放。 1.减少了关联查询 2.适用于单类需要描述的属性 3.不经常变化的属性(拓展、嵌套关联) 父引用：是指存在一对多的情况中，放在同一文档中以数组的形式存放。 子引用：是指存在一对非常多的情况中，由于数据库文档存放限制，这个时候进行反向引用。 什么是反范式 范式是指按既定的用法，范式就是一种公认的模型或模式。 反范式：不走寻常路 反范式设计： 1.是否有提升性能的区间 2.数据量的变化是否非常庞大，庞大到更新会异常低效 3.先考虑读写比，才考虑反范式。</li><li>双向关联的场景及设计原则</li></ul><h4 id="mongodb-安装、配置、gui-工具" tabindex="-1"><a class="header-anchor" href="#mongodb-安装、配置、gui-工具" aria-hidden="true">#</a> MongoDB 安装、配置、GUI 工具</h4><ul><li>介绍和安装</li><li>权限配置、基础语法介绍 db.createUser({user: &#39;test&#39;, pwd: &#39;123456&#39;, roles:[{role: &#39;dbOwner&#39;, db: &#39;testdb&#39;}]})</li><li>备份和恢复 docker exec -it mongotest_mongo_1 mongodump -h localhost -u root -p example -o /tmp/test // 备份到 tmp/test 目录下 docker exec -it mongotest_mongo_1 mongorestore -h localhost -u root -p example --dir /tmp/test // 数据恢复</li><li>GUI 工具使用 Robo 3T</li></ul><h4 id="nodejs-中的-mongoose-库" tabindex="-1"><a class="header-anchor" href="#nodejs-中的-mongoose-库" aria-hidden="true">#</a> Nodejs 中的 Mongoose 库</h4><p>npm install mongoose -S npm install -S saslprep // 提高安全</p><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h3><p>1.高性能 可持久化 2.key-value 结构 支持多种数据类型 3.支持事务，数据的原子性(要么不做/全做) 应用场景：缓存(读写性能优异);计数&amp;消息系统(高并发、发布/订阅阻塞队列功能);分布式会话 session&amp;分布式锁(秒杀) Redis 对比 mongo 1.存储方式不一样 2.使用方式&amp;可靠性不一样 3.应用场景不一样：高性能缓存 vs 海量数据分析</p><h4 id="掌握-redis-的安装方法" tabindex="-1"><a class="header-anchor" href="#掌握-redis-的安装方法" aria-hidden="true">#</a> 掌握 Redis 的安装方法</h4><p>docker run --name some-redis -d redis</p><h4 id="了解-redis-的核心概念-并且学会使用基础-cli-命令" tabindex="-1"><a class="header-anchor" href="#了解-redis-的核心概念-并且学会使用基础-cli-命令" aria-hidden="true">#</a> 了解 Redis 的核心概念，并且学会使用基础 cli 命令</h4><h4 id="掌握-nodejs-操作-redis-的库及配置方法" tabindex="-1"><a class="header-anchor" href="#掌握-nodejs-操作-redis-的库及配置方法" aria-hidden="true">#</a> 掌握 nodejs 操作 Redis 的库及配置方法</h4><h1 id="css-构架" tabindex="-1"><a class="header-anchor" href="#css-构架" aria-hidden="true">#</a> CSS 构架</h1><h2 id="oocss" tabindex="-1"><a class="header-anchor" href="#oocss" aria-hidden="true">#</a> OOCSS</h2><ul><li>原则一：容器与内容分离</li><li>原则二：结构(基础对象)与皮肤分离</li></ul><h2 id="bem" tabindex="-1"><a class="header-anchor" href="#bem" aria-hidden="true">#</a> BEM</h2><p>块(Block) 元素(Element__) 修饰符(Modifier--) 作用：命名规范、让页面结构清晰</p><h2 id="smacss" tabindex="-1"><a class="header-anchor" href="#smacss" aria-hidden="true">#</a> SMACSS</h2><p><a href="github.com/jeffwcx/translate-smacss-zh">smacss 官网</a></p><ul><li>分类:Base Layout Modules State Theme</li><li>好处: 易维护、易复用、易拓展</li><li>命名规范: .l-header .is-hidden .theme-nav</li></ul><h2 id="itcss" tabindex="-1"><a class="header-anchor" href="#itcss" aria-hidden="true">#</a> ITCSS</h2><ul><li>分层: 七层 从上至下 Settring(维护样式的变量) -&gt; Tools(维护样式的工具库) -&gt; Generic(默认样式重置) -&gt; Base -&gt; Objects -&gt; Components -&gt; Trumps(权重更高的样式)</li><li>与 SMACSS 区别: 层次分得更细</li></ul><h2 id="acss" tabindex="-1"><a class="header-anchor" href="#acss" aria-hidden="true">#</a> ACSS</h2><p>经典框架 <a href="tailwindcss.docs">tailwindcss</a> npm install tallwindcss</p><ul><li>一个样式属性一个类</li><li>好处: 极强的复用性 维护成本低</li><li>坏处: 破坏了 css 命名的语义化</li></ul><h2 id="项目中-css-架构方案的选择" tabindex="-1"><a class="header-anchor" href="#项目中-css-架构方案的选择" aria-hidden="true">#</a> 项目中 CSS 架构方案的选择</h2><p>ITCSS + ACSS + BEM setting -&gt;</p><h2 id="setting-层实现" tabindex="-1"><a class="header-anchor" href="#setting-层实现" aria-hidden="true">#</a> setting 层实现</h2>',65),g={},m=(0,s(3744).Z)(g,[["render",function(a,n){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("ul",null,[l,i,(0,e._)("li",null,[p,(0,e._)("a",c,[r,(0,e.Wm)(s)])]),o,u]),d,(0,e._)("p",null,[(0,e._)("a",h,[k,(0,e.Wm)(s)])]),b],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[s,e]of n)a[s]=e;return a}}}]);